{
  "input": {
    "countinput2": "sex",
    "crosstabs.subjectinput": "All",
    "earningsbutton": "Proportions",
    "navbar": "subjectByIndustry",
    "qualinput3": "First degree",
    "YAGinput2": "5"
  },
  "output": {
    "crosstab": {
      "x": {
        "tag": {
          "name": "Reactable",
          "attribs": {
            "data": {
              "SECTIONNAME": [
                "Education",
                "Human health and social work activities",
                "Professional, scientific and technical activities",
                "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                "Information and communication",
                "Administrative and support service activities",
                "Financial and insurance activities",
                "Public administration and defence - compulsory social security",
                "Manufacturing",
                "Accommodation and food service activities",
                "Arts, entertainment and recreation",
                "Transportation and storage",
                "Construction",
                "Other service activities",
                "Real estate activities",
                "Electricity, gas, steam and air conditioning supply",
                "Water supply - sewerage, waste management and remediation activities",
                "Agriculture, forestry and fishing",
                "Activities of households as employers - undifferentiated goods-and services-producing activities of households for own use",
                "Mining and quarrying",
                "Activities of extraterritorial organisations and bodies",
                "Not known"
              ],
              "group_name": [
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All"
              ],
              "Female": [
                0.203,
                0.207,
                0.117,
                0.089,
                0.046,
                0.051,
                0.04,
                0.046,
                0.027,
                0.022,
                0.018,
                0.013,
                0.009,
                0.016,
                0.013,
                0.002,
                0.002,
                0.002,
                0.001,
                0,
                0,
                0.075
              ],
              "Male": [
                0.097,
                0.082,
                0.159,
                0.09,
                0.093,
                0.062,
                0.069,
                0.054,
                0.062,
                0.024,
                0.023,
                0.026,
                0.027,
                0.013,
                0.014,
                0.005,
                0.003,
                0.002,
                0,
                0.001,
                0,
                0.095
              ],
              "Female & Male": [
                0.158,
                0.154,
                0.134,
                0.089,
                0.066,
                0.056,
                0.052,
                0.05,
                0.042,
                0.023,
                0.021,
                0.019,
                0.016,
                0.015,
                0.014,
                0.003,
                0.003,
                0.002,
                0.001,
                0,
                0,
                0.084
              ]
            },
            "columns": [
              {
                "accessor": ".details",
                "name": "",
                "type": "NULL",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "sortable": false,
                "resizable": false,
                "filterable": false,
                "searchable": false,
                "width": 45,
                "align": "center",
                "details": [
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Education",
                              "Education",
                              "Education",
                              "Education",
                              "Education",
                              "Education"
                            ],
                            "group_name": [
                              "Primary education",
                              "Secondary education",
                              "Higher education",
                              "Other education",
                              "Educational support activities",
                              "Pre-primary education"
                            ],
                            "Female": [
                              0.117,
                              0.05,
                              0.022,
                              0.01,
                              0.002,
                              0.002
                            ],
                            "Male": [
                              0.039,
                              0.031,
                              0.017,
                              0.008,
                              0.002,
                              0
                            ],
                            "Female & Male": [
                              0.084,
                              0.042,
                              0.02,
                              0.009,
                              0.002,
                              0.002
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "11.7%",
                                "5.0%",
                                "2.2%",
                                "1.0%",
                                "0.2%",
                                "0.2%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "3.9%",
                                "3.1%",
                                "1.7%",
                                "0.8%",
                                "0.2%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "8.4%",
                                "4.2%",
                                "2.0%",
                                "0.9%",
                                "0.2%",
                                "0.2%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities"
                            ],
                            "group_name": [
                              "Hospital activities",
                              "Other social work activities without accommodation",
                              "Other human health activities",
                              "Other residential care activities",
                              "Medical and dental practice activities",
                              "Social work activities without accommodation for the elderly and disabled",
                              "Residential care activities for the elderly and disabled",
                              "Residential nursing care activities",
                              "Residential care activities for mental retardation; mental health and substance abuse"
                            ],
                            "Female": [
                              0.124,
                              0.029,
                              0.024,
                              0.008,
                              0.008,
                              0.005,
                              0.004,
                              0.003,
                              0.001
                            ],
                            "Male": [
                              0.05,
                              0.009,
                              0.011,
                              0.004,
                              0.003,
                              0.002,
                              0.002,
                              0.001,
                              0.001
                            ],
                            "Female & Male": [
                              0.093,
                              0.02,
                              0.018,
                              0.006,
                              0.006,
                              0.004,
                              0.003,
                              0.002,
                              0.001
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "12.4%",
                                "2.9%",
                                "2.4%",
                                "0.8%",
                                "0.8%",
                                "0.5%",
                                "0.4%",
                                "0.3%",
                                "0.1%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "5.0%",
                                "0.9%",
                                "1.1%",
                                "0.4%",
                                "0.3%",
                                "0.2%",
                                "0.2%",
                                "0.1%",
                                "0.1%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "9.3%",
                                "2.0%",
                                "1.8%",
                                "0.6%",
                                "0.6%",
                                "0.4%",
                                "0.3%",
                                "0.2%",
                                "0.1%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities"
                            ],
                            "group_name": [
                              "Management consultancy activities",
                              "Legal activities",
                              "Accounting; bookkeeping and auditing activities; tax consultancy",
                              "Architectural and engineering activities and related technical consultancy",
                              "Advertising",
                              "Research and experimental development on natural sciences and engineering",
                              "Activities of head offices",
                              "Other professional; scientific and technical activities n.e.c.",
                              "Specialised design activities",
                              "Veterinary activities",
                              "Market research and public opinion polling",
                              "Technical testing and analysis",
                              "Photographic activities",
                              "Research and experimental development on social sciences and humanities",
                              "Translation and interpretation activities"
                            ],
                            "Female": [
                              0.022,
                              0.025,
                              0.016,
                              0.012,
                              0.012,
                              0.006,
                              0.005,
                              0.004,
                              0.004,
                              0.005,
                              0.003,
                              0.002,
                              0.001,
                              0,
                              0
                            ],
                            "Male": [
                              0.03,
                              0.018,
                              0.028,
                              0.033,
                              0.016,
                              0.009,
                              0.006,
                              0.006,
                              0.004,
                              0.001,
                              0.003,
                              0.003,
                              0.001,
                              0,
                              0
                            ],
                            "Female & Male": [
                              0.026,
                              0.022,
                              0.021,
                              0.021,
                              0.014,
                              0.007,
                              0.005,
                              0.005,
                              0.004,
                              0.003,
                              0.003,
                              0.002,
                              0.001,
                              0,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "2.2%",
                                "2.5%",
                                "1.6%",
                                "1.2%",
                                "1.2%",
                                "0.6%",
                                "0.5%",
                                "0.4%",
                                "0.4%",
                                "0.5%",
                                "0.3%",
                                "0.2%",
                                "0.1%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "3.0%",
                                "1.8%",
                                "2.8%",
                                "3.3%",
                                "1.6%",
                                "0.9%",
                                "0.6%",
                                "0.6%",
                                "0.4%",
                                "0.1%",
                                "0.3%",
                                "0.3%",
                                "0.1%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "2.6%",
                                "2.2%",
                                "2.1%",
                                "2.1%",
                                "1.4%",
                                "0.7%",
                                "0.5%",
                                "0.5%",
                                "0.4%",
                                "0.3%",
                                "0.3%",
                                "0.2%",
                                "0.1%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles"
                            ],
                            "group_name": [
                              "Retail sale of other goods in specialised stores",
                              "Retail sale in non-specialised stores",
                              "Wholesale of household goods",
                              "Retail trade not in stores; stalls or markets",
                              "Retail sale of other household equipment in specialised stores",
                              "Other specialised wholesale",
                              "Wholesale of other machinery; equipment and supplies",
                              "Wholesale of food; beverages and tobacco",
                              "Retail sale of cultural and recreation goods in specialised stores",
                              "Sale of motor vehicles",
                              "Wholesale of information and communication equipment",
                              "Retail sale of food; beverages and tobacco in specialised stores",
                              "Non-specialised wholesale trade",
                              "Wholesale on a fee or contract basis",
                              "Retail sale of information and communication equipment in specialised stores",
                              "Maintenance and repair of motor vehicles",
                              "Sale of motor vehicle parts and accessories",
                              "Retail sale of automotive fuel in specialised stores",
                              "Wholesale of agricultural raw materials and live animals",
                              "Sale; maintenance and repair of motorcycles and related parts and accessories",
                              "Retail sale via stalls and markets"
                            ],
                            "Female": [
                              0.026,
                              0.019,
                              0.012,
                              0.007,
                              0.004,
                              0.003,
                              0.002,
                              0.003,
                              0.003,
                              0.002,
                              0.001,
                              0.002,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0,
                              0,
                              0,
                              0
                            ],
                            "Male": [
                              0.014,
                              0.019,
                              0.008,
                              0.006,
                              0.005,
                              0.005,
                              0.005,
                              0.004,
                              0.003,
                              0.004,
                              0.004,
                              0.002,
                              0.002,
                              0.002,
                              0.002,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0,
                              0
                            ],
                            "Female & Male": [
                              0.021,
                              0.019,
                              0.01,
                              0.006,
                              0.005,
                              0.004,
                              0.003,
                              0.003,
                              0.003,
                              0.003,
                              0.003,
                              0.002,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "2.6%",
                                "1.9%",
                                "1.2%",
                                "0.7%",
                                "0.4%",
                                "0.3%",
                                "0.2%",
                                "0.3%",
                                "0.3%",
                                "0.2%",
                                "0.1%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "1.4%",
                                "1.9%",
                                "0.8%",
                                "0.6%",
                                "0.5%",
                                "0.5%",
                                "0.5%",
                                "0.4%",
                                "0.3%",
                                "0.4%",
                                "0.4%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "2.1%",
                                "1.9%",
                                "1.0%",
                                "0.6%",
                                "0.5%",
                                "0.4%",
                                "0.3%",
                                "0.3%",
                                "0.3%",
                                "0.3%",
                                "0.3%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication"
                            ],
                            "group_name": [
                              "Computer programming; consultancy and related activities",
                              "Publishing of books; periodicals and other publishing activities",
                              "Motion picture; video and television programme activities",
                              "Other telecommunications activities",
                              "Data processing; hosting and related activities; web portals",
                              "Television programming and broadcasting activities",
                              "Wireless telecommunications activities",
                              "Software publishing",
                              "Other information service activities",
                              "Sound recording and music publishing activities",
                              "Radio broadcasting",
                              "Satellite telecommunications activities",
                              "Wired telecommunications activities"
                            ],
                            "Female": [
                              0.018,
                              0.01,
                              0.006,
                              0.003,
                              0.003,
                              0.003,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0,
                              0
                            ],
                            "Male": [
                              0.051,
                              0.01,
                              0.008,
                              0.006,
                              0.005,
                              0.005,
                              0.002,
                              0.002,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001
                            ],
                            "Female & Male": [
                              0.032,
                              0.01,
                              0.007,
                              0.004,
                              0.004,
                              0.004,
                              0.002,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "1.8%",
                                "1.0%",
                                "0.6%",
                                "0.3%",
                                "0.3%",
                                "0.3%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "5.1%",
                                "1.0%",
                                "0.8%",
                                "0.6%",
                                "0.5%",
                                "0.5%",
                                "0.2%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "3.2%",
                                "1.0%",
                                "0.7%",
                                "0.4%",
                                "0.4%",
                                "0.4%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities"
                            ],
                            "group_name": [
                              "Temporary employment agency activities",
                              "Business support service activities n.e.c.",
                              "Activities of employment placement agencies",
                              "Travel agency and tour operator activities",
                              "Combined facilities support activities",
                              "Organisation of conventions and trade shows",
                              "Renting and leasing of motor vehicles",
                              "Activities of call centres",
                              "Private security activities",
                              "Cleaning activities",
                              "Renting and leasing of other machinery; equipment and tangible goods",
                              "Office administrative and support activities",
                              "Other human resources provision",
                              "Other reservation service and related activities",
                              "Landscape service activities",
                              "Renting and leasing of personal and household goods",
                              "Security systems service activities",
                              "Investigation activities",
                              "Leasing of intellectual property and similar products; except copyrighted works"
                            ],
                            "Female": [
                              0.019,
                              0.01,
                              0.005,
                              0.004,
                              0.002,
                              0.002,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0
                            ],
                            "Male": [
                              0.02,
                              0.013,
                              0.006,
                              0.003,
                              0.003,
                              0.002,
                              0.003,
                              0.002,
                              0.002,
                              0.002,
                              0.002,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0,
                              0,
                              0
                            ],
                            "Female & Male": [
                              0.019,
                              0.011,
                              0.006,
                              0.004,
                              0.002,
                              0.002,
                              0.002,
                              0.002,
                              0.002,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0,
                              0,
                              0,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "1.9%",
                                "1.0%",
                                "0.5%",
                                "0.4%",
                                "0.2%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "2.0%",
                                "1.3%",
                                "0.6%",
                                "0.3%",
                                "0.3%",
                                "0.2%",
                                "0.3%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "1.9%",
                                "1.1%",
                                "0.6%",
                                "0.4%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities"
                            ],
                            "group_name": [
                              "Monetary intermediation",
                              "Activities auxiliary to insurance and pension funding",
                              "Activities auxiliary to financial services; except insurance and pension funding",
                              "Insurance",
                              "Other financial service activities; except insurance and pension funding",
                              "Fund management activities",
                              "Pension funding",
                              "Trusts; funds and similar financial entities",
                              "Activities of holding companies",
                              "Reinsurance"
                            ],
                            "Female": [
                              0.015,
                              0.007,
                              0.006,
                              0.004,
                              0.004,
                              0.002,
                              0.001,
                              0,
                              0,
                              0
                            ],
                            "Male": [
                              0.024,
                              0.012,
                              0.013,
                              0.006,
                              0.006,
                              0.005,
                              0.001,
                              0.001,
                              0,
                              0
                            ],
                            "Female & Male": [
                              0.019,
                              0.009,
                              0.009,
                              0.005,
                              0.005,
                              0.003,
                              0.001,
                              0.001,
                              0,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "1.5%",
                                "0.7%",
                                "0.6%",
                                "0.4%",
                                "0.4%",
                                "0.2%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "2.4%",
                                "1.2%",
                                "1.3%",
                                "0.6%",
                                "0.6%",
                                "0.5%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "1.9%",
                                "0.9%",
                                "0.9%",
                                "0.5%",
                                "0.5%",
                                "0.3%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Public administration and defence - compulsory social security",
                              "Public administration and defence - compulsory social security",
                              "Public administration and defence - compulsory social security"
                            ],
                            "group_name": [
                              "Provision of services to the community as a whole",
                              "Administration of the State and the economic and social policy of the community",
                              "Compulsory social security activities"
                            ],
                            "Female": [
                              0.021,
                              0.023,
                              0.002
                            ],
                            "Male": [
                              0.032,
                              0.02,
                              0.002
                            ],
                            "Female & Male": [
                              0.026,
                              0.022,
                              0.002
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "2.1%",
                                "2.3%",
                                "0.2%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "3.2%",
                                "2.0%",
                                "0.2%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "2.6%",
                                "2.2%",
                                "0.2%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing"
                            ],
                            "group_name": [
                              "Manufacture of motor vehicles",
                              "Manufacture of air and spacecraft and related machinery",
                              "Manufacture of other food products",
                              "Printing and service activities related to printing",
                              "Manufacture of pharmaceutical preparations",
                              "Manufacture of instruments and appliances for measuring; testing and navigation; watches and clocks",
                              "Manufacture of other general-purpose machinery",
                              "Manufacture of furniture",
                              "Manufacture of plastics products",
                              "Manufacture of beverages",
                              "Manufacture of general-purpose machinery",
                              "Manufacture of bakery and farinaceous products",
                              "Building of ships and boats",
                              "Manufacture of medical and dental instruments and supplies",
                              "Repair of fabricated metal products; machinery and equipment",
                              "Manufacture of soap and detergents; cleaning and polishing preparations; perfumes and toilet preparations",
                              "Treatment and coating of metals; machining",
                              "Manufacture of structural metal products",
                              "Manufacture of basic chemicals; fertilisers and nitrogen compounds; plastics and synthetic rubber in primary forms",
                              "Manufacture of other chemical products",
                              "Manufacture of other special-purpose machinery",
                              "Manufacture of weapons and ammunition",
                              "Manufacture of parts and accessories for motor vehicles",
                              "Processing and preserving of fruit and vegetables",
                              "Processing and preserving of meat and production of meat products",
                              "Manufacture of articles of paper and paperboard ",
                              "Manufacture of articles of concrete; cement and plaster",
                              "Manufacture of electric motors; generators; transformers and electricity distribution and control apparatus",
                              "Manufacture of wearing apparel; except fur apparel",
                              "Manufacture of other fabricated metal products",
                              "Manufacture of basic precious and other non-ferrous metals",
                              "Manufacture of products of wood; cork; straw and plaiting materials",
                              "Manufacture of dairy products",
                              "Manufacture of other textiles",
                              "Manufacture of refined petroleum products",
                              "Manufacturing n.e.c.",
                              "Installation of industrial machinery and equipment",
                              "Manufacture of basic pharmaceutical products",
                              "Manufacture of electronic components and boards",
                              "Manufacture of communication equipment",
                              "Manufacture of paints; varnishes and similar coatings; printing ink and mastics",
                              "Manufacture of prepared animal feeds",
                              "Manufacture of electric lighting equipment",
                              "Manufacture of grain mill products; starches and starch products",
                              "Manufacture of basic iron and steel and of ferro-alloys",
                              "Manufacture of domestic appliances",
                              "Manufacture of games and toys",
                              "Manufacture of computers and peripheral equipment",
                              "Manufacture of optical instruments and photographic equipment",
                              "Manufacture of railway locomotives and rolling stock",
                              "Manufacture of rubber products",
                              "Forging; pressing; stamping and roll-forming of metal; powder metallurgy",
                              "Manufacture of glass and glass products",
                              "Manufacture of other electrical equipment",
                              "Manufacture of tanks; reservoirs and containers of metal",
                              "Manufacture of bodies (coachwork) for motor vehicles; manufacture of trailers and semi-trailers",
                              "Manufacture of cutlery; tools and general hardware",
                              "Manufacture of jewellery; bijouterie and related articles",
                              "Manufacture of other porcelain and ceramic products",
                              "Manufacture of pulp; paper and paperboard",
                              "Manufacture of sports goods",
                              "Manufacture of wiring and wiring devices",
                              "Finishing of textiles",
                              "Manufacture of agricultural and forestry machinery",
                              "Manufacture of consumer electronics",
                              "Manufacture of footwear",
                              "Manufacture of metal forming machinery and machine tools",
                              "Manufacture of transport equipment n.e.c.",
                              "Processing and preserving of fish; crustaceans and molluscs",
                              "Tanning and dressing of leather; manufacture of luggage; handbags; saddlery and harness; dressing and dyeing of fur",
                              "Weaving of textiles",
                              "Casting of metals",
                              "Cutting; shaping and finishing of stone",
                              "Manufacture of abrasive products and non-metallic mineral products n.e.c.",
                              "Manufacture of clay building materials",
                              "Manufacture of irradiation; electromedical and electrotherapeutic equipment",
                              "Manufacture of military fighting vehicles",
                              "Manufacture of other products of first processing of steel",
                              "Manufacture of tubes; pipes; hollow profiles and related fittings; of steel",
                              "Reproduction of recorded media",
                              "Manufacture of pesticides and other agrochemical products",
                              "Sawmilling and planing of wood",
                              "Manufacture of batteries and accumulators",
                              "Manufacture of cement; lime and plaster",
                              "Manufacture of knitted and crocheted apparel",
                              "Manufacture of musical instruments",
                              "Manufacture of refractory products",
                              "Manufacture of vegetable and animal oils and fats",
                              "Manufacture of steam generators; except central heating hot water boilers",
                              "Preparation and spinning of textile fibres"
                            ],
                            "Female": [
                              0.001,
                              0.001,
                              0.002,
                              0.002,
                              0.002,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0.001,
                              0,
                              0.001,
                              0,
                              0,
                              0,
                              0.001,
                              0,
                              0,
                              0,
                              0.001,
                              0,
                              0,
                              0,
                              0,
                              0.001,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              "NA",
                              0
                            ],
                            "Male": [
                              0.005,
                              0.005,
                              0.002,
                              0.002,
                              0.002,
                              0.003,
                              0.002,
                              0.002,
                              0.002,
                              0.002,
                              0.002,
                              0.001,
                              0.002,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0.001,
                              0.001,
                              0,
                              0,
                              0,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0.001,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              "NA",
                              0,
                              0,
                              "NA",
                              0,
                              0
                            ],
                            "Female & Male": [
                              0.003,
                              0.003,
                              0.002,
                              0.002,
                              0.002,
                              0.002,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "0.1%",
                                "0.1%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.1%",
                                "0.0%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "x",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "0.5%",
                                "0.5%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.3%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.1%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "x",
                                "0.0%",
                                "0.0%",
                                "x",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "0.3%",
                                "0.3%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities"
                            ],
                            "group_name": [
                              "Restaurants and mobile food service activities",
                              "Beverage serving activities",
                              "Hotels and similar accommodation",
                              "Event catering and other food service activities",
                              "Holiday and other short-stay accommodation",
                              "Camping grounds; recreational vehicle parks and trailer parks",
                              "Other accommodation"
                            ],
                            "Female": [
                              0.008,
                              0.005,
                              0.005,
                              0.003,
                              0.001,
                              0,
                              0
                            ],
                            "Male": [
                              0.009,
                              0.008,
                              0.003,
                              0.003,
                              0,
                              0,
                              0
                            ],
                            "Female & Male": [
                              0.009,
                              0.006,
                              0.004,
                              0.003,
                              0.001,
                              0,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "0.8%",
                                "0.5%",
                                "0.5%",
                                "0.3%",
                                "0.1%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "0.9%",
                                "0.8%",
                                "0.3%",
                                "0.3%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "0.9%",
                                "0.6%",
                                "0.4%",
                                "0.3%",
                                "0.1%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Arts, entertainment and recreation",
                              "Arts, entertainment and recreation",
                              "Arts, entertainment and recreation",
                              "Arts, entertainment and recreation",
                              "Arts, entertainment and recreation"
                            ],
                            "group_name": [
                              "Sports activities",
                              "Creative; arts and entertainment activities",
                              "Libraries; archives; museums and other cultural activities",
                              "Gambling and betting activities",
                              "Amusement and recreation activities"
                            ],
                            "Female": [
                              0.006,
                              0.006,
                              0.004,
                              0.001,
                              0.002
                            ],
                            "Male": [
                              0.011,
                              0.005,
                              0.002,
                              0.003,
                              0.002
                            ],
                            "Female & Male": [
                              0.008,
                              0.005,
                              0.003,
                              0.002,
                              0.002
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "0.6%",
                                "0.6%",
                                "0.4%",
                                "0.1%",
                                "0.2%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "1.1%",
                                "0.5%",
                                "0.2%",
                                "0.3%",
                                "0.2%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "0.8%",
                                "0.5%",
                                "0.3%",
                                "0.2%",
                                "0.2%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage"
                            ],
                            "group_name": [
                              "Support activities for transportation",
                              "Passenger air transport",
                              "Warehousing and storage",
                              "Other passenger land transport ",
                              "Other postal and courier activities",
                              "Postal activities under universal service obligation",
                              "Freight transport by road and removal services",
                              "Passenger rail transport; interurban",
                              "Sea and coastal passenger water transport",
                              "Sea and coastal freight water transport",
                              "Freight air transport and space transport",
                              "Freight rail transport",
                              "Transport via pipeline",
                              "Inland passenger water transport",
                              "Inland freight water transport"
                            ],
                            "Female": [
                              0.004,
                              0.003,
                              0.002,
                              0.002,
                              0.001,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              "NA"
                            ],
                            "Male": [
                              0.007,
                              0.003,
                              0.004,
                              0.004,
                              0.002,
                              0.002,
                              0.002,
                              0.002,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0
                            ],
                            "Female & Male": [
                              0.005,
                              0.003,
                              0.003,
                              0.003,
                              0.002,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "0.4%",
                                "0.3%",
                                "0.2%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "0.7%",
                                "0.3%",
                                "0.4%",
                                "0.4%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.2%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "0.5%",
                                "0.3%",
                                "0.3%",
                                "0.3%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction"
                            ],
                            "group_name": [
                              "Construction of residential and non-residential buildings",
                              "Construction of other civil engineering projects",
                              "Electrical; plumbing and other construction installation activities",
                              "Development of building projects",
                              "Building completion and finishing",
                              "Other specialised construction activities",
                              "Construction of utility projects",
                              "Construction of roads and railways",
                              "Demolition and site preparation"
                            ],
                            "Female": [
                              0.003,
                              0.001,
                              0.002,
                              0.002,
                              0.001,
                              0,
                              0,
                              0,
                              0
                            ],
                            "Male": [
                              0.01,
                              0.005,
                              0.004,
                              0.003,
                              0.002,
                              0.002,
                              0.001,
                              0.001,
                              0
                            ],
                            "Female & Male": [
                              0.006,
                              0.003,
                              0.002,
                              0.002,
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "0.3%",
                                "0.1%",
                                "0.2%",
                                "0.2%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "1.0%",
                                "0.5%",
                                "0.4%",
                                "0.3%",
                                "0.2%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "0.6%",
                                "0.3%",
                                "0.2%",
                                "0.2%",
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Other service activities",
                              "Other service activities",
                              "Other service activities",
                              "Other service activities",
                              "Other service activities",
                              "Other service activities"
                            ],
                            "group_name": [
                              "Activities of other membership organisations",
                              "Other personal service activities",
                              "Activities of business; employers and professional membership organisations",
                              "Repair of computers and communication equipment",
                              "Activities of trade unions",
                              "Repair of personal and household goods"
                            ],
                            "Female": [
                              0.007,
                              0.004,
                              0.003,
                              0,
                              0,
                              0
                            ],
                            "Male": [
                              0.005,
                              0.003,
                              0.003,
                              0.001,
                              0,
                              0
                            ],
                            "Female & Male": [
                              0.006,
                              0.004,
                              0.003,
                              0.001,
                              0,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "0.7%",
                                "0.4%",
                                "0.3%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "0.5%",
                                "0.3%",
                                "0.3%",
                                "0.1%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "0.6%",
                                "0.4%",
                                "0.3%",
                                "0.1%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Real estate activities",
                              "Real estate activities",
                              "Real estate activities"
                            ],
                            "group_name": [
                              "Real estate activities on a fee or contract basis",
                              "Renting and operating of own or leased real estate",
                              "Buying and selling of own real estate"
                            ],
                            "Female": [
                              0.007,
                              0.005,
                              0
                            ],
                            "Male": [
                              0.009,
                              0.005,
                              0
                            ],
                            "Female & Male": [
                              0.008,
                              0.005,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "0.7%",
                                "0.5%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "0.9%",
                                "0.5%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "0.8%",
                                "0.5%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Electricity, gas, steam and air conditioning supply",
                              "Electricity, gas, steam and air conditioning supply",
                              "Electricity, gas, steam and air conditioning supply"
                            ],
                            "group_name": [
                              "Electric power generation; transmission and distribution",
                              "Manufacture of gas; distribution of gaseous fuels through mains",
                              "Steam and air conditioning supply"
                            ],
                            "Female": [
                              0.002,
                              0.001,
                              "NA"
                            ],
                            "Male": [
                              0.004,
                              0.001,
                              0
                            ],
                            "Female & Male": [
                              0.003,
                              0.001,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "0.2%",
                                "0.1%",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "0.4%",
                                "0.1%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "0.3%",
                                "0.1%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Water supply - sewerage, waste management and remediation activities",
                              "Water supply - sewerage, waste management and remediation activities",
                              "Water supply - sewerage, waste management and remediation activities",
                              "Water supply - sewerage, waste management and remediation activities",
                              "Water supply - sewerage, waste management and remediation activities",
                              "Water supply - sewerage, waste management and remediation activities"
                            ],
                            "group_name": [
                              "Water collection; treatment and supply",
                              "Waste collection",
                              "Sewerage",
                              "Waste treatment and disposal",
                              "Materials recovery",
                              "Remediation activities and other waste management services"
                            ],
                            "Female": [
                              0.001,
                              0,
                              0,
                              0,
                              0,
                              0
                            ],
                            "Male": [
                              0.001,
                              0.001,
                              0.001,
                              0,
                              0,
                              0
                            ],
                            "Female & Male": [
                              0.001,
                              0.001,
                              0,
                              0,
                              0,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "0.1%",
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "0.1%",
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing"
                            ],
                            "group_name": [
                              "Not known",
                              "Manufacture of products of wood; cork; straw and plaiting materials",
                              "Manufacture of knitted and crocheted apparel",
                              "Manufacture of wearing apparel; except fur apparel",
                              "Sawmilling and planing of wood",
                              "Manufacture of jewellery; bijouterie and related articles",
                              "Manufacture of articles of fur"
                            ],
                            "Female": [
                              0.001,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0
                            ],
                            "Male": [
                              0.002,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0
                            ],
                            "Female & Male": [
                              0.001,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "0.2%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "0.1%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Activities of households as employers - undifferentiated goods-and services-producing activities of households for own use"
                            ],
                            "group_name": [
                              "Activities of households as employers of domestic personnel"
                            ],
                            "Female": [
                              0.001
                            ],
                            "Male": [
                              0
                            ],
                            "Female & Male": [
                              0.001
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "0.1%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "0.1%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Mining and quarrying",
                              "Mining and quarrying",
                              "Mining and quarrying",
                              "Mining and quarrying",
                              "Mining and quarrying"
                            ],
                            "group_name": [
                              "Not known",
                              "Combined facilities support activities",
                              "Libraries; archives; museums and other cultural activities",
                              "Cleaning activities",
                              "Computer programming; consultancy and related activities"
                            ],
                            "Female": [
                              0,
                              0,
                              0,
                              0,
                              "NA"
                            ],
                            "Male": [
                              0,
                              0,
                              0,
                              0,
                              0
                            ],
                            "Female & Male": [
                              0,
                              0,
                              0,
                              0,
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%",
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Activities of extraterritorial organisations and bodies"
                            ],
                            "group_name": [
                              "Activities of extraterritorial organisations and bodies"
                            ],
                            "Female": [
                              0
                            ],
                            "Male": [
                              0
                            ],
                            "Female & Male": [
                              0
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "0.0%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Not known"
                            ],
                            "group_name": [
                              "Not known"
                            ],
                            "Female": [
                              0.075
                            ],
                            "Male": [
                              0.094
                            ],
                            "Female & Male": [
                              0.083
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "Female",
                              "name": "Female",
                              "type": "numeric",
                              "cell": [
                                "7.5%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Male",
                              "name": "Male",
                              "type": "numeric",
                              "cell": [
                                "9.4%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Female & Male",
                              "name": "Female & Male",
                              "type": "numeric",
                              "cell": [
                                "8.3%"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "accessor": "SECTIONNAME",
                "name": "Industry",
                "type": "character",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "footer": "TOTAL (N)",
                "na": "x",
                "width": 500
              },
              {
                "accessor": "group_name",
                "name": "3 digit SIC code",
                "type": "character",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "na": "x",
                "width": 300
              },
              {
                "accessor": "Female",
                "name": "Female",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "20.3%",
                  "20.7%",
                  "11.7%",
                  "8.9%",
                  "4.6%",
                  "5.1%",
                  "4.0%",
                  "4.6%",
                  "2.7%",
                  "2.2%",
                  "1.8%",
                  "1.3%",
                  "0.9%",
                  "1.6%",
                  "1.3%",
                  "0.2%",
                  "0.2%",
                  "0.2%",
                  "0.1%",
                  "0.0%",
                  "0.0%",
                  "7.5%"
                ],
                "footer": "124,090",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "accessor": "Male",
                "name": "Male",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "9.7%",
                  "8.2%",
                  "15.9%",
                  "9.0%",
                  "9.3%",
                  "6.2%",
                  "6.9%",
                  "5.4%",
                  "6.2%",
                  "2.4%",
                  "2.3%",
                  "2.6%",
                  "2.7%",
                  "1.3%",
                  "1.4%",
                  "0.5%",
                  "0.3%",
                  "0.2%",
                  "0.0%",
                  "0.1%",
                  "0.0%",
                  "9.5%"
                ],
                "footer": "91,375",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "accessor": "Female & Male",
                "name": "Female & Male",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "15.8%",
                  "15.4%",
                  "13.4%",
                  "8.9%",
                  "6.6%",
                  "5.6%",
                  "5.2%",
                  "5.0%",
                  "4.2%",
                  "2.3%",
                  "2.1%",
                  "1.9%",
                  "1.6%",
                  "1.5%",
                  "1.4%",
                  "0.3%",
                  "0.3%",
                  "0.2%",
                  "0.1%",
                  "0.0%",
                  "0.0%",
                  "8.4%"
                ],
                "footer": "215,470",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Female & Male']\n              var max = 0.206785397695221\n              var min = 0\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              }
            ],
            "defaultPageSize": 22,
            "paginationType": "numbers",
            "showPageInfo": true,
            "minRows": 1,
            "showSortable": true,
            "height": "600px",
            "dataKey": "random_key"
          },
          "children": [

          ]
        },
        "class": "reactR_markup"
      },
      "evals": [
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.21.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.21.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.21.children.0.attribs.columns.4.style",
        "tag.attribs.columns.3.style",
        "tag.attribs.columns.4.style",
        "tag.attribs.columns.5.style"
      ],
      "jsHooks": [

      ],
      "deps": [

      ]
    },
    "crosstab_text": "For first degree graduates of all subjects, five years after graduation, the industry with the highest proportion of female graduates is <b>Human health and social work activities<\/b>, and the median earnings of females in this industry were <b>£27,400<\/b>. The industry with the highest proportion of male graduates was <b>Professional, scientific and technical activities<\/b> and the median earnings of males in this industry were <b>£34,800<\/b>.<br/><br/> The biggest difference in proportions is seen in <b>Human health and social work activities<\/b> where the proportion of female graduates is <b> 12.5  percentage points higher<\/b> than the proportion of male graduates. The biggest difference in median earnings is seen in <b>Mining and quarrying<\/b> where the median earnings of male graduates were <b>£15,500  higher<\/b> than the median earnings of female graduates. The group with the highest earnings was  <b>Male<\/b> graduates who worked in the <b>Mining and quarrying<\/b> industry (median earnings of <b>£42,600<\/b>). <b>41%<\/b> of female graduates are concentrated in the top 2\n                           industries (either <b>Education<\/b> or <b>Human health and social work activities<\/b>),\n                           whereas for male graduates this is 17.8%.<br/><br/>",
    "crosstab_title": "<h4> Industry of graduate employment for graduates of all subjects by sex, five years after\n                          graduation, male and female first degree graduates from English HEIs, APs and FECs,\n                            2019/20 tax year.<\/h4>"
  }
}
