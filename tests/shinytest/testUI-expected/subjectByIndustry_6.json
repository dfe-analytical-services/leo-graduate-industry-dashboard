{
  "input": {
    "countinput2": "ethnicity",
    "crosstabs.subjectinput": "Allied health",
    "earningsbutton": "Median earnings",
    "navbar": "subjectByIndustry",
    "qualinput3": "Level 8",
    "YAGinput2": "1"
  },
  "output": {
    "crosstab": {
      "x": {
        "tag": {
          "name": "Reactable",
          "attribs": {
            "data": {
              "SECTIONNAME": [
                "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                "Water supply - sewerage, waste management and remediation activities",
                "Transportation and storage",
                "Human health and social work activities",
                "Public administration and defence - compulsory social security",
                "Manufacturing",
                "Real estate activities",
                "Professional, scientific and technical activities",
                "Electricity, gas, steam and air conditioning supply",
                "Other service activities",
                "Agriculture, forestry and fishing",
                "Information and communication",
                "Arts, entertainment and recreation",
                "Mining and quarrying",
                "Accommodation and food service activities",
                "Construction",
                "Financial and insurance activities",
                "Education",
                "Activities of households as employers - undifferentiated goods-and services-producing activities of households for own use",
                "Administrative and support service activities",
                "Not known"
              ],
              "group_name": [
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All"
              ],
              "White": [
                26100,
                26200,
                26300,
                22800,
                24800,
                24500,
                24400,
                23900,
                25700,
                24800,
                23400,
                25800,
                22700,
                "NA",
                25900,
                23100,
                24400,
                26000,
                23700,
                24500,
                24600
              ],
              "Black": [
                26500,
                25900,
                23600,
                24800,
                25100,
                25400,
                24300,
                25000,
                "NA",
                24600,
                "NA",
                25600,
                25100,
                "NA",
                24100,
                23700,
                25100,
                25500,
                23900,
                24200,
                24500
              ],
              "Asian": [
                24600,
                "NA",
                23800,
                24500,
                24800,
                25200,
                24800,
                22800,
                "NA",
                24600,
                "NA",
                25200,
                24300,
                "NA",
                25600,
                24800,
                24600,
                25000,
                "NA",
                24200,
                24500
              ],
              "Mixed": [
                24700,
                "NA",
                24400,
                23900,
                26000,
                26000,
                25200,
                24600,
                "NA",
                27900,
                "NA",
                26000,
                27100,
                "NA",
                26500,
                "NA",
                25300,
                27000,
                25100,
                26900,
                26500
              ],
              "Other": [
                24400,
                "NA",
                24200,
                23100,
                25300,
                25300,
                25500,
                25500,
                "NA",
                25600,
                "NA",
                "NA",
                23200,
                "NA",
                "NA",
                26400,
                24800,
                23100,
                "NA",
                23600,
                25400
              ],
              "Not known": [
                23300,
                "NA",
                24400,
                25900,
                24400,
                25400,
                25000,
                24800,
                "NA",
                "NA",
                24300,
                25000,
                23700,
                25300,
                24800,
                "NA",
                26800,
                25200,
                "NA",
                25200,
                25200
              ]
            },
            "columns": [
              {
                "accessor": ".details",
                "name": "",
                "type": "NULL",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "sortable": false,
                "resizable": false,
                "filterable": false,
                "width": 45,
                "align": "center",
                "details": [
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles"
                            ],
                            "group_name": [
                              "Retail trade not in stores; stalls or markets",
                              "Retail sale of food; beverages and tobacco in specialised stores",
                              "Wholesale on a fee or contract basis",
                              "Sale of motor vehicle parts and accessories",
                              "Retail sale of information and communication equipment in specialised stores",
                              "Retail sale of cultural and recreation goods in specialised stores",
                              "Other specialised wholesale",
                              "Retail sale of other household equipment in specialised stores",
                              "Wholesale of information and communication equipment",
                              "Wholesale of other machinery; equipment and supplies",
                              "Sale of motor vehicles",
                              "Maintenance and repair of motor vehicles",
                              "Wholesale of food; beverages and tobacco",
                              "Non-specialised wholesale trade",
                              "Retail sale of automotive fuel in specialised stores",
                              "Retail sale of other goods in specialised stores",
                              "Retail sale in non-specialised stores",
                              "Wholesale of household goods"
                            ],
                            "White": [
                              26348,
                              28329,
                              23661,
                              24856,
                              26275,
                              24813,
                              24361,
                              25543,
                              28031,
                              24820,
                              25089,
                              24692,
                              24910,
                              25715,
                              27309,
                              25789,
                              26355,
                              26220
                            ],
                            "Black": [
                              23644,
                              "NA",
                              24529,
                              "NA",
                              "NA",
                              "NA",
                              26090,
                              25404,
                              "NA",
                              25228,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              23325,
                              25416,
                              26081
                            ],
                            "Asian": [
                              26002,
                              24304,
                              25143,
                              "NA",
                              "NA",
                              24122,
                              "NA",
                              25693,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              25410,
                              25312,
                              "NA",
                              25386,
                              22896,
                              25288
                            ],
                            "Mixed": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              25271,
                              "NA",
                              26110,
                              "NA",
                              "NA",
                              27337,
                              "NA",
                              "NA",
                              26648,
                              "NA",
                              23807,
                              25603,
                              "NA"
                            ],
                            "Other": [
                              "NA",
                              24197,
                              "NA",
                              "NA",
                              "NA",
                              23914,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24147,
                              "NA",
                              "NA",
                              25020,
                              24017,
                              25195
                            ],
                            "Not known": [
                              "NA",
                              26902,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24838,
                              25498,
                              25028
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£26,348",
                                "£28,329",
                                "£23,661",
                                "£24,856",
                                "£26,275",
                                "£24,813",
                                "£24,361",
                                "£25,543",
                                "£28,031",
                                "£24,820",
                                "£25,089",
                                "£24,692",
                                "£24,910",
                                "£25,715",
                                "£27,309",
                                "£25,789",
                                "£26,355",
                                "£26,220"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "£23,644",
                                "x",
                                "£24,529",
                                "x",
                                "x",
                                "x",
                                "£26,090",
                                "£25,404",
                                "x",
                                "£25,228",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£23,325",
                                "£25,416",
                                "£26,081"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "£26,002",
                                "£24,304",
                                "£25,143",
                                "x",
                                "x",
                                "£24,122",
                                "x",
                                "£25,693",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£25,410",
                                "£25,312",
                                "x",
                                "£25,386",
                                "£22,896",
                                "£25,288"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£25,271",
                                "x",
                                "£26,110",
                                "x",
                                "x",
                                "£27,337",
                                "x",
                                "x",
                                "£26,648",
                                "x",
                                "£23,807",
                                "£25,603",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£24,197",
                                "x",
                                "x",
                                "x",
                                "£23,914",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,147",
                                "x",
                                "x",
                                "£25,020",
                                "£24,017",
                                "£25,195"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£26,902",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,838",
                                "£25,498",
                                "£25,028"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Water supply - sewerage, waste management and remediation activities",
                              "Water supply - sewerage, waste management and remediation activities",
                              "Water supply - sewerage, waste management and remediation activities"
                            ],
                            "group_name": [
                              "Waste collection",
                              "Water collection; treatment and supply",
                              "Materials recovery"
                            ],
                            "White": [
                              25012,
                              "NA",
                              23467
                            ],
                            "Black": [
                              "NA",
                              25662,
                              "NA"
                            ],
                            "Asian": [
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "Mixed": [
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "Other": [
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "Not known": [
                              "NA",
                              "NA",
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£25,012",
                                "x",
                                "£23,467"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£25,662",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage"
                            ],
                            "group_name": [
                              "Postal activities under universal service obligation",
                              "Passenger air transport",
                              "Other passenger land transport",
                              "Support activities for transportation",
                              "Passenger rail transport; interurban",
                              "Sea and coastal freight water transport",
                              "Other postal and courier activities",
                              "Freight transport by road and removal services",
                              "Warehousing and storage"
                            ],
                            "White": [
                              25015,
                              25214,
                              25035,
                              26048,
                              26768,
                              "NA",
                              24900,
                              23346,
                              23480
                            ],
                            "Black": [
                              "NA",
                              25452,
                              25309,
                              25937,
                              "NA",
                              24889,
                              25238,
                              "NA",
                              "NA"
                            ],
                            "Asian": [
                              "NA",
                              "NA",
                              25132,
                              25081,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              25124
                            ],
                            "Mixed": [
                              24003,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "Other": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              25756,
                              "NA",
                              "NA"
                            ],
                            "Not known": [
                              25385,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£25,015",
                                "£25,214",
                                "£25,035",
                                "£26,048",
                                "£26,768",
                                "x",
                                "£24,900",
                                "£23,346",
                                "£23,480"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£25,452",
                                "£25,309",
                                "£25,937",
                                "x",
                                "£24,889",
                                "£25,238",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "£25,132",
                                "£25,081",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£25,124"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "£24,003",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£25,756",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "£25,385",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities"
                            ],
                            "group_name": [
                              "Other residential care activities",
                              "Residential nursing care activities",
                              "Other human health activities",
                              "Hospital activities",
                              "Other social work activities without accommodation",
                              "Residential care activities for mental retardation; mental health and substance abuse",
                              "Social work activities without accommodation for the elderly and disabled",
                              "Medical and dental practice activities",
                              "Residential care activities for the elderly and disabled"
                            ],
                            "White": [
                              25614,
                              24545,
                              24636,
                              23145,
                              24232,
                              25658,
                              24981,
                              24729,
                              25164
                            ],
                            "Black": [
                              24783,
                              25635,
                              24931,
                              24477,
                              25478,
                              25067,
                              25613,
                              22785,
                              24948
                            ],
                            "Asian": [
                              25513,
                              25205,
                              24666,
                              24764,
                              26018,
                              25623,
                              23120,
                              23739,
                              26298
                            ],
                            "Mixed": [
                              25346,
                              25975,
                              26163,
                              24641,
                              25281,
                              "NA",
                              24990,
                              "NA",
                              24075
                            ],
                            "Other": [
                              23605,
                              "NA",
                              27174,
                              25401,
                              27114,
                              "NA",
                              23660,
                              25989,
                              "NA"
                            ],
                            "Not known": [
                              22357,
                              24075,
                              25546,
                              23907,
                              24945,
                              "NA",
                              26101,
                              25337,
                              24367
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£25,614",
                                "£24,545",
                                "£24,636",
                                "£23,145",
                                "£24,232",
                                "£25,658",
                                "£24,981",
                                "£24,729",
                                "£25,164"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "£24,783",
                                "£25,635",
                                "£24,931",
                                "£24,477",
                                "£25,478",
                                "£25,067",
                                "£25,613",
                                "£22,785",
                                "£24,948"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "£25,513",
                                "£25,205",
                                "£24,666",
                                "£24,764",
                                "£26,018",
                                "£25,623",
                                "£23,120",
                                "£23,739",
                                "£26,298"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "£25,346",
                                "£25,975",
                                "£26,163",
                                "£24,641",
                                "£25,281",
                                "x",
                                "£24,990",
                                "x",
                                "£24,075"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "£23,605",
                                "x",
                                "£27,174",
                                "£25,401",
                                "£27,114",
                                "x",
                                "£23,660",
                                "£25,989",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "£22,357",
                                "£24,075",
                                "£25,546",
                                "£23,907",
                                "£24,945",
                                "x",
                                "£26,101",
                                "£25,337",
                                "£24,367"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Public administration and defence - compulsory social security",
                              "Public administration and defence - compulsory social security",
                              "Public administration and defence - compulsory social security"
                            ],
                            "group_name": [
                              "Compulsory social security activities",
                              "Administration of the State and the economic and social policy of the community",
                              "Provision of services to the community as a whole"
                            ],
                            "White": [
                              25039,
                              24750,
                              24024
                            ],
                            "Black": [
                              "NA",
                              25693,
                              25659
                            ],
                            "Asian": [
                              "NA",
                              24095,
                              24755
                            ],
                            "Mixed": [
                              "NA",
                              "NA",
                              23599
                            ],
                            "Other": [
                              24867,
                              "NA",
                              "NA"
                            ],
                            "Not known": [
                              25206,
                              24797,
                              26137
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£25,039",
                                "£24,750",
                                "£24,024"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£25,693",
                                "£25,659"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£24,095",
                                "£24,755"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "£23,599"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "£24,867",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "£25,206",
                                "£24,797",
                                "£26,137"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing"
                            ],
                            "group_name": [
                              "Manufacture of beverages",
                              "Manufacture of electronic components and boards",
                              "Manufacture of soap and detergents; cleaning and polishing preparations; perfumes and toilet preparations",
                              "Manufacture of other porcelain and ceramic products",
                              "Manufacture of other general-purpose machinery",
                              "Manufacture of air and spacecraft and related machinery",
                              "Manufacture of railway locomotives and rolling stock",
                              "Manufacture of articles of concrete; cement and plaster",
                              "Installation of industrial machinery and equipment",
                              "Manufacture of medical and dental instruments and supplies",
                              "Manufacture of grain mill products; starches and starch products",
                              "Repair of fabricated metal products; machinery and equipment",
                              "Manufacturing n.e.c.",
                              "Manufacture of basic precious and other non-ferrous metals",
                              "Tanning and dressing of leather; manufacture of luggage; handbags; saddlery and harness; dressing and dyeing of fur",
                              "Manufacture of wiring and wiring devices",
                              "Manufacture of pharmaceutical preparations",
                              "Printing and service activities related to printing",
                              "Processing and preserving of fruit and vegetables",
                              "Manufacture of optical instruments and photographic equipment",
                              "Manufacture of furniture",
                              "Processing and preserving of meat and production of meat products",
                              "Manufacture of weapons and ammunition",
                              "Manufacture of plastics products",
                              "Manufacture of other food products",
                              "Manufacture of other chemical products",
                              "Manufacture of paints; varnishes and similar coatings; printing ink and mastics",
                              "Manufacture of basic chemicals; fertilisers and nitrogen compounds; plastics and synthetic rubber in primary forms",
                              "Manufacture of motor vehicles",
                              "Manufacture of bakery and farinaceous products",
                              "Manufacture of footwear",
                              "Manufacture of general-purpose machinery",
                              "Treatment and coating of metals; machining",
                              "Manufacture of instruments and appliances for measuring; testing and navigation; watches and clocks",
                              "Manufacture of dairy products",
                              "Manufacture of basic pharmaceutical products",
                              "Manufacture of sports goods",
                              "Manufacture of electric lighting equipment"
                            ],
                            "White": [
                              23755,
                              24662,
                              24270,
                              25430,
                              23707,
                              21983,
                              24982,
                              24258,
                              "NA",
                              25995,
                              24518,
                              24443,
                              "NA",
                              24690,
                              24715,
                              25662,
                              25792,
                              "NA",
                              26044,
                              23717,
                              24790,
                              25059,
                              22573,
                              23506,
                              23683,
                              26681,
                              24400,
                              24324,
                              24442,
                              24805,
                              "NA",
                              23455,
                              25526,
                              24433,
                              27981,
                              24374,
                              26503,
                              26890
                            ],
                            "Black": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24914,
                              25502,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              23889,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              26771,
                              25692,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24444,
                              "NA",
                              "NA"
                            ],
                            "Asian": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              23858,
                              "NA",
                              "NA",
                              26284,
                              "NA",
                              "NA",
                              "NA",
                              26316,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24399,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24185,
                              "NA",
                              25730,
                              "NA",
                              "NA",
                              "NA",
                              24542,
                              "NA",
                              "NA"
                            ],
                            "Mixed": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              25540,
                              24887,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24431,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24938,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              25306,
                              "NA",
                              "NA",
                              24197,
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "Other": [
                              "NA",
                              "NA",
                              "NA",
                              24243,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24744,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24669,
                              "NA",
                              "NA"
                            ],
                            "Not known": [
                              22050,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24973,
                              24097,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£23,755",
                                "£24,662",
                                "£24,270",
                                "£25,430",
                                "£23,707",
                                "£21,983",
                                "£24,982",
                                "£24,258",
                                "x",
                                "£25,995",
                                "£24,518",
                                "£24,443",
                                "x",
                                "£24,690",
                                "£24,715",
                                "£25,662",
                                "£25,792",
                                "x",
                                "£26,044",
                                "£23,717",
                                "£24,790",
                                "£25,059",
                                "£22,573",
                                "£23,506",
                                "£23,683",
                                "£26,681",
                                "£24,400",
                                "£24,324",
                                "£24,442",
                                "£24,805",
                                "x",
                                "£23,455",
                                "£25,526",
                                "£24,433",
                                "£27,981",
                                "£24,374",
                                "£26,503",
                                "£26,890"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,914",
                                "£25,502",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£23,889",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£26,771",
                                "£25,692",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,444",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£23,858",
                                "x",
                                "x",
                                "£26,284",
                                "x",
                                "x",
                                "x",
                                "£26,316",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,399",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,185",
                                "x",
                                "£25,730",
                                "x",
                                "x",
                                "x",
                                "£24,542",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "£25,540",
                                "£24,887",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,431",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,938",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£25,306",
                                "x",
                                "x",
                                "£24,197",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "£24,243",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,744",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,669",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "£22,050",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,973",
                                "£24,097",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Real estate activities",
                              "Real estate activities"
                            ],
                            "group_name": [
                              "Renting and operating of own or leased real estate",
                              "Real estate activities on a fee or contract basis"
                            ],
                            "White": [
                              23474,
                              24471
                            ],
                            "Black": [
                              23242,
                              25793
                            ],
                            "Asian": [
                              24729,
                              26691
                            ],
                            "Mixed": [
                              "NA",
                              25430
                            ],
                            "Other": [
                              "NA",
                              26455
                            ],
                            "Not known": [
                              22936,
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£23,474",
                                "£24,471"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "£23,242",
                                "£25,793"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "£24,729",
                                "£26,691"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£25,430"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£26,455"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "£22,936",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities"
                            ],
                            "group_name": [
                              "Specialised design activities",
                              "Advertising",
                              "Technical testing and analysis",
                              "Architectural and engineering activities and related technical consultancy",
                              "Activities of head offices",
                              "Research and experimental development on natural sciences and engineering",
                              "Other professional; scientific and technical activities n.e.c.",
                              "Accounting; bookkeeping and auditing activities; tax consultancy",
                              "Legal activities",
                              "Research and experimental development on social sciences and humanities",
                              "Market research and public opinion polling",
                              "Photographic activities",
                              "Management consultancy activities",
                              "Veterinary activities"
                            ],
                            "White": [
                              23876,
                              24819,
                              26024,
                              24103,
                              24361,
                              27176,
                              25623,
                              26362,
                              24651,
                              24374,
                              24077,
                              23857,
                              25455,
                              23703
                            ],
                            "Black": [
                              "NA",
                              25004,
                              24815,
                              25723,
                              25503,
                              24580,
                              24219,
                              26009,
                              25196,
                              "NA",
                              25640,
                              "NA",
                              24241,
                              "NA"
                            ],
                            "Asian": [
                              25781,
                              23903,
                              24288,
                              26104,
                              23883,
                              23407,
                              22786,
                              25186,
                              24261,
                              "NA",
                              "NA",
                              "NA",
                              23811,
                              "NA"
                            ],
                            "Mixed": [
                              "NA",
                              "NA",
                              "NA",
                              26485,
                              "NA",
                              24986,
                              24038,
                              25439,
                              "NA",
                              25457,
                              "NA",
                              "NA",
                              25084,
                              "NA"
                            ],
                            "Other": [
                              "NA",
                              "NA",
                              25251,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              25069,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "Not known": [
                              "NA",
                              "NA",
                              "NA",
                              24885,
                              "NA",
                              "NA",
                              "NA",
                              23674,
                              24376,
                              "NA",
                              "NA",
                              "NA",
                              25206,
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£23,876",
                                "£24,819",
                                "£26,024",
                                "£24,103",
                                "£24,361",
                                "£27,176",
                                "£25,623",
                                "£26,362",
                                "£24,651",
                                "£24,374",
                                "£24,077",
                                "£23,857",
                                "£25,455",
                                "£23,703"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£25,004",
                                "£24,815",
                                "£25,723",
                                "£25,503",
                                "£24,580",
                                "£24,219",
                                "£26,009",
                                "£25,196",
                                "x",
                                "£25,640",
                                "x",
                                "£24,241",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "£25,781",
                                "£23,903",
                                "£24,288",
                                "£26,104",
                                "£23,883",
                                "£23,407",
                                "£22,786",
                                "£25,186",
                                "£24,261",
                                "x",
                                "x",
                                "x",
                                "£23,811",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "£26,485",
                                "x",
                                "£24,986",
                                "£24,038",
                                "£25,439",
                                "x",
                                "£25,457",
                                "x",
                                "x",
                                "£25,084",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "£25,251",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£25,069",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "£24,885",
                                "x",
                                "x",
                                "x",
                                "£23,674",
                                "£24,376",
                                "x",
                                "x",
                                "x",
                                "£25,206",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Electricity, gas, steam and air conditioning supply",
                              "Electricity, gas, steam and air conditioning supply"
                            ],
                            "group_name": [
                              "Electric power generation; transmission and distribution",
                              "Steam and air conditioning supply"
                            ],
                            "White": [
                              25343,
                              24136
                            ],
                            "Black": [
                              "NA",
                              "NA"
                            ],
                            "Asian": [
                              "NA",
                              "NA"
                            ],
                            "Mixed": [
                              "NA",
                              "NA"
                            ],
                            "Other": [
                              "NA",
                              "NA"
                            ],
                            "Not known": [
                              "NA",
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£25,343",
                                "£24,136"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Other service activities",
                              "Other service activities",
                              "Other service activities",
                              "Other service activities",
                              "Other service activities"
                            ],
                            "group_name": [
                              "Activities of business; employers and professional membership organisations",
                              "Repair of computers and communication equipment",
                              "Other personal service activities",
                              "Activities of trade unions",
                              "Activities of other membership organisations"
                            ],
                            "White": [
                              25292,
                              24688,
                              23518,
                              25170,
                              24471
                            ],
                            "Black": [
                              25375,
                              "NA",
                              25454,
                              "NA",
                              24282
                            ],
                            "Asian": [
                              23023,
                              "NA",
                              25670,
                              "NA",
                              "NA"
                            ],
                            "Mixed": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24156
                            ],
                            "Other": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              25183
                            ],
                            "Not known": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£25,292",
                                "£24,688",
                                "£23,518",
                                "£25,170",
                                "£24,471"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "£25,375",
                                "x",
                                "£25,454",
                                "x",
                                "£24,282"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "£23,023",
                                "x",
                                "£25,670",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,156"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "£25,183"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Agriculture, forestry and fishing"
                            ],
                            "group_name": [
                              "Not known"
                            ],
                            "White": [
                              25310
                            ],
                            "Black": [
                              "NA"
                            ],
                            "Asian": [
                              "NA"
                            ],
                            "Mixed": [
                              "NA"
                            ],
                            "Other": [
                              "NA"
                            ],
                            "Not known": [
                              24235
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£25,310"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "£24,235"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication"
                            ],
                            "group_name": [
                              "Motion picture; video and television programme activities",
                              "Software publishing",
                              "Sound recording and music publishing activities",
                              "Satellite telecommunications activities",
                              "Other telecommunications activities",
                              "Other information service activities",
                              "Data processing; hosting and related activities; web portals",
                              "Computer programming; consultancy and related activities",
                              "Wireless telecommunications activities",
                              "Publishing of books; periodicals and other publishing activities"
                            ],
                            "White": [
                              25284,
                              24329,
                              "NA",
                              22776,
                              25153,
                              24311,
                              25724,
                              25273,
                              25437,
                              24356
                            ],
                            "Black": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24140,
                              25592,
                              23868,
                              25767
                            ],
                            "Asian": [
                              "NA",
                              24192,
                              "NA",
                              "NA",
                              26146,
                              "NA",
                              24177,
                              25650,
                              "NA",
                              25315
                            ],
                            "Mixed": [
                              23854,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              23627,
                              26390,
                              24468,
                              25175
                            ],
                            "Other": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "Not known": [
                              "NA",
                              "NA",
                              25169,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              25170,
                              "NA",
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£25,284",
                                "£24,329",
                                "x",
                                "£22,776",
                                "£25,153",
                                "£24,311",
                                "£25,724",
                                "£25,273",
                                "£25,437",
                                "£24,356"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,140",
                                "£25,592",
                                "£23,868",
                                "£25,767"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£24,192",
                                "x",
                                "x",
                                "£26,146",
                                "x",
                                "£24,177",
                                "£25,650",
                                "x",
                                "£25,315"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "£23,854",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£23,627",
                                "£26,390",
                                "£24,468",
                                "£25,175"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "£25,169",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£25,170",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Arts, entertainment and recreation",
                              "Arts, entertainment and recreation",
                              "Arts, entertainment and recreation",
                              "Arts, entertainment and recreation",
                              "Arts, entertainment and recreation"
                            ],
                            "group_name": [
                              "Gambling and betting activities",
                              "Creative; arts and entertainment activities",
                              "Sports activities",
                              "Amusement and recreation activities",
                              "Libraries; archives; museums and other cultural activities"
                            ],
                            "White": [
                              26127,
                              25471,
                              23829,
                              25013,
                              26630
                            ],
                            "Black": [
                              24371,
                              23503,
                              24929,
                              "NA",
                              "NA"
                            ],
                            "Asian": [
                              "NA",
                              "NA",
                              24010,
                              "NA",
                              "NA"
                            ],
                            "Mixed": [
                              23599,
                              "NA",
                              25990,
                              "NA",
                              24095
                            ],
                            "Other": [
                              "NA",
                              "NA",
                              24089,
                              "NA",
                              "NA"
                            ],
                            "Not known": [
                              "NA",
                              22517,
                              25431,
                              "NA",
                              24295
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£26,127",
                                "£25,471",
                                "£23,829",
                                "£25,013",
                                "£26,630"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "£24,371",
                                "£23,503",
                                "£24,929",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "£24,010",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "£23,599",
                                "x",
                                "£25,990",
                                "x",
                                "£24,095"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "£24,089",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£22,517",
                                "£25,431",
                                "x",
                                "£24,295"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Mining and quarrying"
                            ],
                            "group_name": [
                              "Not known"
                            ],
                            "White": [
                              "NA"
                            ],
                            "Black": [
                              "NA"
                            ],
                            "Asian": [
                              "NA"
                            ],
                            "Mixed": [
                              "NA"
                            ],
                            "Other": [
                              "NA"
                            ],
                            "Not known": [
                              25007
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "£25,007"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities"
                            ],
                            "group_name": [
                              "Restaurants and mobile food service activities",
                              "Camping grounds; recreational vehicle parks and trailer parks",
                              "Other accommodation",
                              "Hotels and similar accommodation",
                              "Beverage serving activities",
                              "Event catering and other food service activities",
                              "Holiday and other short-stay accommodation"
                            ],
                            "White": [
                              25367,
                              23970,
                              24065,
                              25023,
                              25875,
                              25534,
                              24446
                            ],
                            "Black": [
                              24788,
                              "NA",
                              25509,
                              "NA",
                              25008,
                              24970,
                              "NA"
                            ],
                            "Asian": [
                              25250,
                              "NA",
                              "NA",
                              24995,
                              26753,
                              "NA",
                              25755
                            ],
                            "Mixed": [
                              24643,
                              "NA",
                              "NA",
                              25652,
                              "NA",
                              24539,
                              "NA"
                            ],
                            "Other": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "Not known": [
                              25303,
                              "NA",
                              "NA",
                              "NA",
                              24432,
                              "NA",
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£25,367",
                                "£23,970",
                                "£24,065",
                                "£25,023",
                                "£25,875",
                                "£25,534",
                                "£24,446"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "£24,788",
                                "x",
                                "£25,509",
                                "x",
                                "£25,008",
                                "£24,970",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "£25,250",
                                "x",
                                "x",
                                "£24,995",
                                "£26,753",
                                "x",
                                "£25,755"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "£24,643",
                                "x",
                                "x",
                                "£25,652",
                                "x",
                                "£24,539",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "£25,303",
                                "x",
                                "x",
                                "x",
                                "£24,432",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction"
                            ],
                            "group_name": [
                              "Electrical; plumbing and other construction installation activities",
                              "Development of building projects",
                              "Construction of other civil engineering projects",
                              "Building completion and finishing",
                              "Construction of roads and railways",
                              "Construction of residential and non-residential buildings",
                              "Other specialised construction activities"
                            ],
                            "White": [
                              24614,
                              25940,
                              25929,
                              23173,
                              26696,
                              25424,
                              23006
                            ],
                            "Black": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              25770,
                              "NA"
                            ],
                            "Asian": [
                              "NA",
                              "NA",
                              "NA",
                              26093,
                              "NA",
                              "NA",
                              24035
                            ],
                            "Mixed": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "Other": [
                              25543,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "Not known": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£24,614",
                                "£25,940",
                                "£25,929",
                                "£23,173",
                                "£26,696",
                                "£25,424",
                                "£23,006"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£25,770",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "£26,093",
                                "x",
                                "x",
                                "£24,035"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "£25,543",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities"
                            ],
                            "group_name": [
                              "Fund management activities",
                              "Activities auxiliary to financial services; except insurance and pension funding",
                              "Pension funding",
                              "Activities auxiliary to insurance and pension funding",
                              "Monetary intermediation",
                              "Activities of holding companies",
                              "Trusts; funds and similar financial entities",
                              "Other financial service activities; except insurance and pension funding",
                              "Insurance"
                            ],
                            "White": [
                              "NA",
                              23528,
                              25701,
                              25219,
                              24878,
                              26173,
                              26620,
                              23506,
                              23960
                            ],
                            "Black": [
                              23646,
                              "NA",
                              25727,
                              23559,
                              25481,
                              "NA",
                              "NA",
                              27019,
                              "NA"
                            ],
                            "Asian": [
                              "NA",
                              23887,
                              "NA",
                              23916,
                              25998,
                              "NA",
                              "NA",
                              25592,
                              24212
                            ],
                            "Mixed": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24057,
                              "NA",
                              "NA",
                              "NA",
                              26473
                            ],
                            "Other": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              25713,
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "Not known": [
                              24074,
                              "NA",
                              "NA",
                              25450,
                              23600,
                              "NA",
                              "NA",
                              "NA",
                              24434
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£23,528",
                                "£25,701",
                                "£25,219",
                                "£24,878",
                                "£26,173",
                                "£26,620",
                                "£23,506",
                                "£23,960"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "£23,646",
                                "x",
                                "£25,727",
                                "£23,559",
                                "£25,481",
                                "x",
                                "x",
                                "£27,019",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£23,887",
                                "x",
                                "£23,916",
                                "£25,998",
                                "x",
                                "x",
                                "£25,592",
                                "£24,212"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,057",
                                "x",
                                "x",
                                "x",
                                "£26,473"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "£25,713",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "£24,074",
                                "x",
                                "x",
                                "£25,450",
                                "£23,600",
                                "x",
                                "x",
                                "x",
                                "£24,434"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Education",
                              "Education",
                              "Education",
                              "Education",
                              "Education",
                              "Education"
                            ],
                            "group_name": [
                              "Educational support activities",
                              "Other education",
                              "Pre-primary education",
                              "Primary education",
                              "Higher education",
                              "Secondary education"
                            ],
                            "White": [
                              23800,
                              26071,
                              25571,
                              25580,
                              24827,
                              24845
                            ],
                            "Black": [
                              "NA",
                              24867,
                              22930,
                              24565,
                              25540,
                              27712
                            ],
                            "Asian": [
                              25047,
                              27615,
                              25825,
                              25885,
                              24498,
                              26294
                            ],
                            "Mixed": [
                              25659,
                              "NA",
                              "NA",
                              24332,
                              25006,
                              25798
                            ],
                            "Other": [
                              26586,
                              "NA",
                              "NA",
                              24307,
                              "NA",
                              25095
                            ],
                            "Not known": [
                              "NA",
                              25035,
                              "NA",
                              24280,
                              23917,
                              24817
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£23,800",
                                "£26,071",
                                "£25,571",
                                "£25,580",
                                "£24,827",
                                "£24,845"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£24,867",
                                "£22,930",
                                "£24,565",
                                "£25,540",
                                "£27,712"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "£25,047",
                                "£27,615",
                                "£25,825",
                                "£25,885",
                                "£24,498",
                                "£26,294"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "£25,659",
                                "x",
                                "x",
                                "£24,332",
                                "£25,006",
                                "£25,798"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "£26,586",
                                "x",
                                "x",
                                "£24,307",
                                "x",
                                "£25,095"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£25,035",
                                "x",
                                "£24,280",
                                "£23,917",
                                "£24,817"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Activities of households as employers - undifferentiated goods-and services-producing activities of households for own use"
                            ],
                            "group_name": [
                              "Activities of households as employers of domestic personnel"
                            ],
                            "White": [
                              23099
                            ],
                            "Black": [
                              24952
                            ],
                            "Asian": [
                              "NA"
                            ],
                            "Mixed": [
                              25401
                            ],
                            "Other": [
                              "NA"
                            ],
                            "Not known": [
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£23,099"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "£24,952"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "£25,401"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities"
                            ],
                            "group_name": [
                              "Renting and leasing of other machinery; equipment and tangible goods",
                              "Organisation of conventions and trade shows",
                              "Other human resources provision",
                              "Combined facilities support activities",
                              "Temporary employment agency activities",
                              "Business support service activities n.e.c.",
                              "Travel agency and tour operator activities",
                              "Activities of employment placement agencies",
                              "Activities of call centres",
                              "Private security activities",
                              "Renting and leasing of personal and household goods",
                              "Renting and leasing of motor vehicles",
                              "Cleaning activities",
                              "Office administrative and support activities"
                            ],
                            "White": [
                              24260,
                              25305,
                              24373,
                              24236,
                              26160,
                              23365,
                              25215,
                              25643,
                              24667,
                              24088,
                              23428,
                              24353,
                              23749,
                              22966
                            ],
                            "Black": [
                              "NA",
                              25924,
                              23138,
                              26262,
                              25115,
                              25744,
                              "NA",
                              26462,
                              26205,
                              25314,
                              "NA",
                              "NA",
                              26219,
                              "NA"
                            ],
                            "Asian": [
                              "NA",
                              23948,
                              24684,
                              24358,
                              26355,
                              25381,
                              "NA",
                              23872,
                              25075,
                              23592,
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "Mixed": [
                              26333,
                              "NA",
                              "NA",
                              "NA",
                              27288,
                              25692,
                              "NA",
                              24557,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "Other": [
                              "NA",
                              "NA",
                              "NA",
                              25824,
                              25677,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              25697
                            ],
                            "Not known": [
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24888,
                              25246,
                              "NA",
                              24906,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              24799,
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£24,260",
                                "£25,305",
                                "£24,373",
                                "£24,236",
                                "£26,160",
                                "£23,365",
                                "£25,215",
                                "£25,643",
                                "£24,667",
                                "£24,088",
                                "£23,428",
                                "£24,353",
                                "£23,749",
                                "£22,966"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£25,924",
                                "£23,138",
                                "£26,262",
                                "£25,115",
                                "£25,744",
                                "x",
                                "£26,462",
                                "£26,205",
                                "£25,314",
                                "x",
                                "x",
                                "£26,219",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£23,948",
                                "£24,684",
                                "£24,358",
                                "£26,355",
                                "£25,381",
                                "x",
                                "£23,872",
                                "£25,075",
                                "£23,592",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "£26,333",
                                "x",
                                "x",
                                "x",
                                "£27,288",
                                "£25,692",
                                "x",
                                "£24,557",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "£25,824",
                                "£25,677",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£25,697"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,888",
                                "£25,246",
                                "x",
                                "£24,906",
                                "x",
                                "x",
                                "x",
                                "x",
                                "£24,799",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Not known"
                            ],
                            "group_name": [
                              "Not known"
                            ],
                            "White": [
                              25729
                            ],
                            "Black": [
                              23476
                            ],
                            "Asian": [
                              24904
                            ],
                            "Mixed": [
                              25270
                            ],
                            "Other": [
                              24588
                            ],
                            "Not known": [
                              25767
                            ]
                          },
                          "columns": [
                            {
                              "accessor": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "accessor": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "accessor": "White",
                              "name": "White",
                              "type": "numeric",
                              "cell": [
                                "£25,729"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Black",
                              "name": "Black",
                              "type": "numeric",
                              "cell": [
                                "£23,476"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Asian",
                              "name": "Asian",
                              "type": "numeric",
                              "cell": [
                                "£24,904"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Mixed",
                              "name": "Mixed",
                              "type": "numeric",
                              "cell": [
                                "£25,270"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Other",
                              "name": "Other",
                              "type": "numeric",
                              "cell": [
                                "£24,588"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "accessor": "Not known",
                              "name": "Not known",
                              "type": "numeric",
                              "cell": [
                                "£25,767"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "paginationType": "numbers",
                          "showPageInfo": true,
                          "minRows": 1,
                          "outlined": true,
                          "dataKey": "random_key",
                          "key": "random_key",
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "accessor": "SECTIONNAME",
                "name": "Industry",
                "type": "character",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "footer": "TOTAL (N)",
                "na": "x",
                "width": 500
              },
              {
                "accessor": "group_name",
                "name": "3 digit SIC code",
                "type": "character",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "footer": "TOTAL (N)",
                "na": "x",
                "width": 300
              },
              {
                "accessor": "White",
                "name": "White",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£26,100",
                  "£26,200",
                  "£26,300",
                  "£22,800",
                  "£24,800",
                  "£24,500",
                  "£24,400",
                  "£23,900",
                  "£25,700",
                  "£24,800",
                  "£23,400",
                  "£25,800",
                  "£22,700",
                  "x",
                  "£25,900",
                  "£23,100",
                  "£24,400",
                  "£26,000",
                  "£23,700",
                  "£24,500",
                  "£24,600"
                ],
                "footer": "29,085",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['White']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "accessor": "Black",
                "name": "Black",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£26,500",
                  "£25,900",
                  "£23,600",
                  "£24,800",
                  "£25,100",
                  "£25,400",
                  "£24,300",
                  "£25,000",
                  "x",
                  "£24,600",
                  "x",
                  "£25,600",
                  "£25,100",
                  "x",
                  "£24,100",
                  "£23,700",
                  "£25,100",
                  "£25,500",
                  "£23,900",
                  "£24,200",
                  "£24,500"
                ],
                "footer": "22,120",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Black']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "accessor": "Asian",
                "name": "Asian",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£24,600",
                  "x",
                  "£23,800",
                  "£24,500",
                  "£24,800",
                  "£25,200",
                  "£24,800",
                  "£22,800",
                  "x",
                  "£24,600",
                  "x",
                  "£25,200",
                  "£24,300",
                  "x",
                  "£25,600",
                  "£24,800",
                  "£24,600",
                  "£25,000",
                  "x",
                  "£24,200",
                  "£24,500"
                ],
                "footer": "23,090",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Asian']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "accessor": "Mixed",
                "name": "Mixed",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£24,700",
                  "x",
                  "£24,400",
                  "£23,900",
                  "£26,000",
                  "£26,000",
                  "£25,200",
                  "£24,600",
                  "x",
                  "£27,900",
                  "x",
                  "£26,000",
                  "£27,100",
                  "x",
                  "£26,500",
                  "x",
                  "£25,300",
                  "£27,000",
                  "£25,100",
                  "£26,900",
                  "£26,500"
                ],
                "footer": "14,410",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Mixed']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "accessor": "Other",
                "name": "Other",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£24,400",
                  "x",
                  "£24,200",
                  "£23,100",
                  "£25,300",
                  "£25,300",
                  "£25,500",
                  "£25,500",
                  "x",
                  "£25,600",
                  "x",
                  "x",
                  "£23,200",
                  "x",
                  "x",
                  "£26,400",
                  "£24,800",
                  "£23,100",
                  "x",
                  "£23,600",
                  "£25,400"
                ],
                "footer": "16,705",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Other']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "accessor": "Not known",
                "name": "Not known",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£23,300",
                  "x",
                  "£24,400",
                  "£25,900",
                  "£24,400",
                  "£25,400",
                  "£25,000",
                  "£24,800",
                  "x",
                  "x",
                  "£24,300",
                  "£25,000",
                  "£23,700",
                  "£25,300",
                  "£24,800",
                  "x",
                  "£26,800",
                  "£25,200",
                  "x",
                  "£25,200",
                  "£25,200"
                ],
                "footer": "19,960",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Not known']\n              var max = 27900\n              var min = 22700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, set background to white.\n              if (value < 0.001) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              }
            ],
            "defaultPageSize": 22,
            "paginationType": "numbers",
            "showPageInfo": true,
            "minRows": 1,
            "showSortable": true,
            "height": "600px",
            "dataKey": "random_key",
            "key": "random_key"
          },
          "children": [

          ]
        },
        "class": "reactR_markup"
      },
      "evals": [
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.7.style",
        "tag.attribs.columns.3.style",
        "tag.attribs.columns.4.style",
        "tag.attribs.columns.5.style",
        "tag.attribs.columns.6.style",
        "tag.attribs.columns.7.style",
        "tag.attribs.columns.8.style"
      ],
      "jsHooks": [

      ],
      "deps": [

      ]
    },
    "crosstab_text": "For first degree graduates of Allied health, 1 years after graduation, <b> Construction <\/b> was the most common industry for    and White  ethnicity graduates,\n                      <b> Wholesale and retail trade - repair of motor vehicles and motorcycles <\/b> was the most common industry for    and Black  ethnicity graduates, <b> Other service activities <\/b> was the most common industry for    and Asian  ethnicity graduates, <b> Administrative and support service activities <\/b> was the most common industry for    and Mixed  ethnicity graduates, <b> Human health and social work activities <\/b> was the most common industry for    and Other  ethnicity graduates, and <b> Public administration and defence - compulsory social security <\/b> was the most common industry for    and Not known  ethnicity graduates.<br/><br/>The industry with the largest range in proportions was <b>Administrative and support service activities<\/b>\n                           where Mixed ethnicity graduates had the highest proportion and Black\n                           ethnicity graduates had the lowest proportion.The industry with the largest range in median earnings was <b>Arts, entertainment and recreation<\/b>\n                           where Mixed ethnicity graduates the highest median earnings (<b>£27,100<\/b>) and White ethnicity graduates had the lowest median earnings (<b>£22,700<\/b>).The group with the highest median earnings was <b>Mixed<\/b> ethnicity graduates in\n                           the <b>Other service activities<\/b> industry (median earnings of <b>£27,900<\/b>).<br/><br/>",
    "crosstab_title": "<h4> Industry of graduate employment for graduates of Allied health by ethnicity, one year after\n                          graduation, male and female first degree graduates from English HEIs, APs and FECs,\n                            2018/19 tax year.<\/h4>"
  }
}
