{
  "input": {
    "YAGinput2": "5",
    "countinput2": "current_region",
    "crosstabs.subjectinput": "All",
    "earningsbutton": "Median earnings",
    "navlistPanel": "subjectByIndustry",
    "qualinput3": "First degree"
  },
  "output": {
    "crosstab": {
      "x": {
        "tag": {
          "name": "Reactable",
          "attribs": {
            "data": {
              "SECTIONNAME": [
                "Human health and social work activities",
                "Education",
                "Professional, scientific and technical activities",
                "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                "Information and communication",
                "Administrative and support service activities",
                "Public administration and defence - compulsory social security",
                "Financial and insurance activities",
                "Manufacturing",
                "Accommodation and food service activities",
                "Arts, entertainment and recreation",
                "Transportation and storage",
                "Construction",
                "Real estate activities",
                "Other service activities",
                "Electricity, gas, steam and air conditioning supply",
                "Water supply - sewerage, waste management and remediation activities",
                "Agriculture, forestry and fishing",
                "Mining and quarrying",
                "Activities of households as employers - undifferentiated goods-and services-producing activities of households for own use",
                "Activities of extraterritorial organisations and bodies",
                "Not known"
              ],
              "group_name": [
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All",
                "All"
              ],
              "North East": [
                30300,
                27000,
                28800,
                21900,
                29200,
                21500,
                26300,
                25200,
                31800,
                19300,
                19300,
                25400,
                35400,
                25200,
                22300,
                40300,
                27400,
                -10000,
                -10000,
                -10000,
                "NA",
                20000
              ],
              "North West": [
                29900,
                26300,
                29200,
                24100,
                31400,
                24500,
                27000,
                27700,
                33200,
                20100,
                21900,
                28500,
                33600,
                25900,
                22600,
                34700,
                31000,
                23000,
                -10000,
                -10000,
                "NA",
                16700
              ],
              "Yorkshire and The Humber": [
                29200,
                26300,
                29200,
                23000,
                31400,
                23000,
                27400,
                27000,
                29600,
                19300,
                23400,
                28100,
                32500,
                25600,
                21900,
                34300,
                32100,
                25200,
                -10000,
                "NA",
                "NA",
                18900
              ],
              "East Midlands": [
                29600,
                27000,
                30300,
                24800,
                32500,
                24500,
                27400,
                30300,
                33900,
                20400,
                22300,
                28800,
                36900,
                25600,
                24100,
                28800,
                31600,
                21400,
                -10000,
                -10000,
                "NA",
                19200
              ],
              "West Midlands": [
                29900,
                27700,
                30700,
                24800,
                33600,
                23900,
                27400,
                28500,
                35000,
                20800,
                23700,
                28800,
                35000,
                25200,
                23400,
                35000,
                29900,
                21900,
                -10000,
                -10000,
                "NA",
                18200
              ],
              "East of England": [
                31400,
                28100,
                35400,
                27000,
                37200,
                29600,
                29900,
                41600,
                36100,
                22600,
                24500,
                32100,
                40200,
                29600,
                26300,
                43100,
                31900,
                26300,
                47800,
                -10000,
                -10000,
                18500
              ],
              "London": [
                35000,
                31400,
                39800,
                29600,
                40900,
                32100,
                35000,
                57300,
                37200,
                24500,
                27000,
                33900,
                39800,
                34300,
                29600,
                46700,
                35000,
                23900,
                -10000,
                21400,
                "NA",
                19300
              ],
              "South East": [
                31400,
                28500,
                36100,
                27000,
                38000,
                28800,
                30700,
                41600,
                35000,
                22600,
                25200,
                31400,
                39400,
                31800,
                26600,
                39800,
                33600,
                23000,
                -10000,
                -10000,
                -10000,
                20400
              ],
              "South West": [
                29600,
                26600,
                32500,
                22600,
                32500,
                25200,
                28100,
                31400,
                33400,
                19700,
                21600,
                29200,
                33600,
                28800,
                24100,
                39100,
                31800,
                23400,
                -10000,
                -10000,
                "NA",
                19400
              ]
            },
            "columns": [
              {
                "id": ".details",
                "name": "",
                "type": null,
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "sortable": false,
                "resizable": false,
                "filterable": false,
                "searchable": false,
                "width": 45,
                "align": "center",
                "details": [
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities",
                              "Human health and social work activities"
                            ],
                            "group_name": [
                              "Hospital activities",
                              "Other human health activities",
                              "Medical and dental practice activities",
                              "Residential nursing care activities",
                              "Other residential care activities",
                              "Other social work activities without accommodation",
                              "Residential care activities for mental retardation; mental health and substance abuse",
                              "Social work activities without accommodation for the elderly and disabled",
                              "Residential care activities for the elderly and disabled"
                            ],
                            "North East": [
                              32800,
                              26300,
                              28500,
                              34300,
                              22600,
                              20800,
                              22100,
                              21200,
                              19700
                            ],
                            "North West": [
                              32800,
                              28800,
                              27000,
                              26300,
                              24500,
                              21500,
                              22600,
                              20800,
                              21500
                            ],
                            "Yorkshire and The Humber": [
                              32800,
                              28500,
                              23400,
                              23900,
                              21400,
                              21500,
                              23000,
                              21500,
                              20300
                            ],
                            "East Midlands": [
                              32100,
                              28100,
                              25900,
                              31200,
                              24800,
                              21200,
                              21900,
                              20100,
                              23400
                            ],
                            "West Midlands": [
                              33200,
                              29200,
                              26100,
                              25700,
                              23400,
                              22300,
                              21200,
                              21500,
                              21900
                            ],
                            "East of England": [
                              35000,
                              30700,
                              29200,
                              23400,
                              25200,
                              24800,
                              -10000,
                              21900,
                              21200
                            ],
                            "London": [
                              40900,
                              33600,
                              31200,
                              34700,
                              26300,
                              27700,
                              25200,
                              27400,
                              25400
                            ],
                            "South East": [
                              35000,
                              30300,
                              29600,
                              25400,
                              25200,
                              24100,
                              26300,
                              23700,
                              21900
                            ],
                            "South West": [
                              32700,
                              28100,
                              25300,
                              31800,
                              22600,
                              21500,
                              19700,
                              20600,
                              20100
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "£32,800",
                                "£26,300",
                                "£28,500",
                                "£34,300",
                                "£22,600",
                                "£20,800",
                                "£22,100",
                                "£21,200",
                                "£19,700"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "£32,800",
                                "£28,800",
                                "£27,000",
                                "£26,300",
                                "£24,500",
                                "£21,500",
                                "£22,600",
                                "£20,800",
                                "£21,500"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "£32,800",
                                "£28,500",
                                "£23,400",
                                "£23,900",
                                "£21,400",
                                "£21,500",
                                "£23,000",
                                "£21,500",
                                "£20,300"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "£32,100",
                                "£28,100",
                                "£25,900",
                                "£31,200",
                                "£24,800",
                                "£21,200",
                                "£21,900",
                                "£20,100",
                                "£23,400"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "£33,200",
                                "£29,200",
                                "£26,100",
                                "£25,700",
                                "£23,400",
                                "£22,300",
                                "£21,200",
                                "£21,500",
                                "£21,900"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "£35,000",
                                "£30,700",
                                "£29,200",
                                "£23,400",
                                "£25,200",
                                "£24,800",
                                "c",
                                "£21,900",
                                "£21,200"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£40,900",
                                "£33,600",
                                "£31,200",
                                "£34,700",
                                "£26,300",
                                "£27,700",
                                "£25,200",
                                "£27,400",
                                "£25,400"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "£35,000",
                                "£30,300",
                                "£29,600",
                                "£25,400",
                                "£25,200",
                                "£24,100",
                                "£26,300",
                                "£23,700",
                                "£21,900"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "£32,700",
                                "£28,100",
                                "£25,300",
                                "£31,800",
                                "£22,600",
                                "£21,500",
                                "£19,700",
                                "£20,600",
                                "£20,100"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "a05cd36915520421478b720da120da7d",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Education",
                              "Education",
                              "Education",
                              "Education",
                              "Education",
                              "Education"
                            ],
                            "group_name": [
                              "Primary education",
                              "Secondary education",
                              "Higher education",
                              "Other education",
                              "Educational support activities",
                              "Pre-primary education"
                            ],
                            "North East": [
                              28100,
                              26500,
                              24600,
                              25200,
                              19300,
                              15300
                            ],
                            "North West": [
                              27700,
                              26600,
                              25200,
                              23000,
                              20400,
                              17500
                            ],
                            "Yorkshire and The Humber": [
                              26600,
                              27700,
                              23700,
                              25200,
                              23700,
                              18600
                            ],
                            "East Midlands": [
                              28100,
                              28100,
                              23400,
                              24100,
                              20100,
                              20800
                            ],
                            "West Midlands": [
                              28100,
                              28100,
                              26300,
                              24300,
                              19000,
                              17200
                            ],
                            "East of England": [
                              28800,
                              28100,
                              27000,
                              26600,
                              23700,
                              19300
                            ],
                            "London": [
                              32100,
                              31900,
                              31000,
                              28100,
                              26800,
                              21900
                            ],
                            "South East": [
                              28800,
                              28800,
                              27000,
                              26600,
                              29200,
                              18600
                            ],
                            "South West": [
                              28100,
                              26300,
                              25200,
                              24500,
                              23700,
                              18200
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "£28,100",
                                "£26,500",
                                "£24,600",
                                "£25,200",
                                "£19,300",
                                "£15,300"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "£27,700",
                                "£26,600",
                                "£25,200",
                                "£23,000",
                                "£20,400",
                                "£17,500"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "£26,600",
                                "£27,700",
                                "£23,700",
                                "£25,200",
                                "£23,700",
                                "£18,600"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "£28,100",
                                "£28,100",
                                "£23,400",
                                "£24,100",
                                "£20,100",
                                "£20,800"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "£28,100",
                                "£28,100",
                                "£26,300",
                                "£24,300",
                                "£19,000",
                                "£17,200"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "£28,800",
                                "£28,100",
                                "£27,000",
                                "£26,600",
                                "£23,700",
                                "£19,300"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£32,100",
                                "£31,900",
                                "£31,000",
                                "£28,100",
                                "£26,800",
                                "£21,900"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "£28,800",
                                "£28,800",
                                "£27,000",
                                "£26,600",
                                "£29,200",
                                "£18,600"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "£28,100",
                                "£26,300",
                                "£25,200",
                                "£24,500",
                                "£23,700",
                                "£18,200"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "9dc69a81cdbd48f39c5eac6cae535f17",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities",
                              "Professional, scientific and technical activities"
                            ],
                            "group_name": [
                              "Accounting; bookkeeping and auditing activities; tax consultancy",
                              "Management consultancy activities",
                              "Research and experimental development on natural sciences and engineering",
                              "Activities of head offices",
                              "Market research and public opinion polling",
                              "Research and experimental development on social sciences and humanities",
                              "Advertising",
                              "Architectural and engineering activities and related technical consultancy",
                              "Legal activities",
                              "Other professional; scientific and technical activities n.e.c.",
                              "Veterinary activities",
                              "Specialised design activities",
                              "Translation and interpretation activities",
                              "Technical testing and analysis",
                              "Photographic activities"
                            ],
                            "North East": [
                              29000,
                              27700,
                              29900,
                              30800,
                              -10000,
                              -10000,
                              24800,
                              32800,
                              28100,
                              25000,
                              25700,
                              24500,
                              -10000,
                              29900,
                              -10000
                            ],
                            "North West": [
                              34700,
                              29900,
                              32700,
                              31000,
                              33600,
                              29200,
                              29600,
                              30700,
                              25000,
                              29400,
                              28100,
                              25900,
                              23500,
                              25900,
                              -10000
                            ],
                            "Yorkshire and The Humber": [
                              36500,
                              29600,
                              31800,
                              33200,
                              27400,
                              -10000,
                              28700,
                              30300,
                              25600,
                              24800,
                              32800,
                              25400,
                              -10000,
                              21400,
                              -10000
                            ],
                            "East Midlands": [
                              34300,
                              33900,
                              33200,
                              35800,
                              37600,
                              -10000,
                              29200,
                              30700,
                              26600,
                              25900,
                              25900,
                              25600,
                              -10000,
                              27200,
                              -10000
                            ],
                            "West Midlands": [
                              35800,
                              29600,
                              32500,
                              29900,
                              33400,
                              -10000,
                              27700,
                              32800,
                              27700,
                              26600,
                              32800,
                              28800,
                              -10000,
                              21900,
                              -10000
                            ],
                            "East of England": [
                              43400,
                              35800,
                              37600,
                              38300,
                              33800,
                              -10000,
                              34300,
                              35000,
                              34300,
                              31600,
                              29900,
                              29200,
                              -10000,
                              26100,
                              23000
                            ],
                            "London": [
                              47400,
                              44500,
                              38500,
                              40900,
                              38000,
                              34300,
                              36100,
                              34700,
                              46400,
                              34300,
                              28800,
                              32100,
                              31200,
                              29200,
                              27000
                            ],
                            "South East": [
                              43800,
                              39100,
                              36500,
                              40200,
                              31900,
                              40700,
                              34700,
                              33900,
                              36700,
                              30700,
                              31200,
                              27400,
                              29600,
                              31000,
                              29400
                            ],
                            "South West": [
                              38000,
                              33600,
                              38300,
                              31000,
                              31600,
                              -10000,
                              29600,
                              32500,
                              29900,
                              30700,
                              30800,
                              27700,
                              -10000,
                              27700,
                              -10000
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "£29,000",
                                "£27,700",
                                "£29,900",
                                "£30,800",
                                "c",
                                "c",
                                "£24,800",
                                "£32,800",
                                "£28,100",
                                "£25,000",
                                "£25,700",
                                "£24,500",
                                "c",
                                "£29,900",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "£34,700",
                                "£29,900",
                                "£32,700",
                                "£31,000",
                                "£33,600",
                                "£29,200",
                                "£29,600",
                                "£30,700",
                                "£25,000",
                                "£29,400",
                                "£28,100",
                                "£25,900",
                                "£23,500",
                                "£25,900",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "£36,500",
                                "£29,600",
                                "£31,800",
                                "£33,200",
                                "£27,400",
                                "c",
                                "£28,700",
                                "£30,300",
                                "£25,600",
                                "£24,800",
                                "£32,800",
                                "£25,400",
                                "c",
                                "£21,400",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "£34,300",
                                "£33,900",
                                "£33,200",
                                "£35,800",
                                "£37,600",
                                "c",
                                "£29,200",
                                "£30,700",
                                "£26,600",
                                "£25,900",
                                "£25,900",
                                "£25,600",
                                "c",
                                "£27,200",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "£35,800",
                                "£29,600",
                                "£32,500",
                                "£29,900",
                                "£33,400",
                                "c",
                                "£27,700",
                                "£32,800",
                                "£27,700",
                                "£26,600",
                                "£32,800",
                                "£28,800",
                                "c",
                                "£21,900",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "£43,400",
                                "£35,800",
                                "£37,600",
                                "£38,300",
                                "£33,800",
                                "c",
                                "£34,300",
                                "£35,000",
                                "£34,300",
                                "£31,600",
                                "£29,900",
                                "£29,200",
                                "c",
                                "£26,100",
                                "£23,000"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£47,400",
                                "£44,500",
                                "£38,500",
                                "£40,900",
                                "£38,000",
                                "£34,300",
                                "£36,100",
                                "£34,700",
                                "£46,400",
                                "£34,300",
                                "£28,800",
                                "£32,100",
                                "£31,200",
                                "£29,200",
                                "£27,000"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "£43,800",
                                "£39,100",
                                "£36,500",
                                "£40,200",
                                "£31,900",
                                "£40,700",
                                "£34,700",
                                "£33,900",
                                "£36,700",
                                "£30,700",
                                "£31,200",
                                "£27,400",
                                "£29,600",
                                "£31,000",
                                "£29,400"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "£38,000",
                                "£33,600",
                                "£38,300",
                                "£31,000",
                                "£31,600",
                                "c",
                                "£29,600",
                                "£32,500",
                                "£29,900",
                                "£30,700",
                                "£30,800",
                                "£27,700",
                                "c",
                                "£27,700",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "f4a0c6b3721729489b210b99956afefc",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles",
                              "Wholesale and retail trade - repair of motor vehicles and motorcycles"
                            ],
                            "group_name": [
                              "Wholesale of information and communication equipment",
                              "Wholesale on a fee or contract basis",
                              "Wholesale of other machinery; equipment and supplies",
                              "Wholesale of food; beverages and tobacco",
                              "Retail sale of automotive fuel in specialised stores",
                              "Wholesale of household goods",
                              "Sale of motor vehicles",
                              "Other specialised wholesale",
                              "Retail trade not in stores; stalls or markets",
                              "Wholesale of agricultural raw materials and live animals",
                              "Retail sale of information and communication equipment in specialised stores",
                              "Non-specialised wholesale trade",
                              "Sale of motor vehicle parts and accessories",
                              "Maintenance and repair of motor vehicles",
                              "Retail sale of other goods in specialised stores",
                              "Retail sale of other household equipment in specialised stores",
                              "Sale; maintenance and repair of motorcycles and related parts and accessories",
                              "Retail sale of cultural and recreation goods in specialised stores",
                              "Retail sale in non-specialised stores",
                              "Retail sale of food; beverages and tobacco in specialised stores",
                              "Retail sale via stalls and markets"
                            ],
                            "North East": [
                              33900,
                              -10000,
                              29000,
                              -10000,
                              -10000,
                              27400,
                              25200,
                              31000,
                              24500,
                              -10000,
                              27700,
                              -10000,
                              -10000,
                              25200,
                              21500,
                              18200,
                              "NA",
                              19300,
                              18100,
                              23000,
                              "NA"
                            ],
                            "North West": [
                              29400,
                              24800,
                              32800,
                              24800,
                              20100,
                              25900,
                              32500,
                              27400,
                              28100,
                              -10000,
                              22600,
                              28100,
                              24100,
                              24500,
                              21500,
                              21000,
                              "NA",
                              21500,
                              19300,
                              15500,
                              -10000
                            ],
                            "Yorkshire and The Humber": [
                              40200,
                              23000,
                              30500,
                              25600,
                              18600,
                              27100,
                              28100,
                              27100,
                              22800,
                              27200,
                              25200,
                              27700,
                              21900,
                              24500,
                              19900,
                              20400,
                              -10000,
                              21500,
                              21000,
                              19300,
                              -10000
                            ],
                            "East Midlands": [
                              28300,
                              27400,
                              28100,
                              28100,
                              -10000,
                              29200,
                              27000,
                              28500,
                              24500,
                              -10000,
                              -10000,
                              28100,
                              20300,
                              24600,
                              24100,
                              23000,
                              -10000,
                              21000,
                              20800,
                              24600,
                              -10000
                            ],
                            "West Midlands": [
                              31400,
                              31000,
                              32800,
                              29600,
                              -10000,
                              26100,
                              29600,
                              27200,
                              27600,
                              -10000,
                              19000,
                              30700,
                              27400,
                              25200,
                              21900,
                              21200,
                              -10000,
                              19600,
                              20400,
                              19900,
                              "NA"
                            ],
                            "East of England": [
                              38500,
                              30700,
                              30300,
                              36500,
                              43400,
                              31000,
                              34300,
                              28800,
                              29600,
                              -10000,
                              29200,
                              25200,
                              21900,
                              20800,
                              24100,
                              24500,
                              -10000,
                              21200,
                              21900,
                              23700,
                              "NA"
                            ],
                            "London": [
                              49600,
                              39500,
                              30800,
                              36000,
                              62400,
                              33600,
                              31400,
                              29900,
                              32500,
                              -10000,
                              31400,
                              26600,
                              26300,
                              23200,
                              28100,
                              27400,
                              -10000,
                              23800,
                              25200,
                              22600,
                              -10000
                            ],
                            "South East": [
                              40000,
                              34900,
                              32100,
                              32200,
                              53700,
                              31900,
                              35000,
                              29200,
                              28500,
                              -10000,
                              25000,
                              33200,
                              28300,
                              26600,
                              23400,
                              24800,
                              "NA",
                              20100,
                              20800,
                              23400,
                              "NA"
                            ],
                            "South West": [
                              40700,
                              26600,
                              30300,
                              27700,
                              -10000,
                              32100,
                              25600,
                              30800,
                              24800,
                              -10000,
                              25200,
                              24100,
                              29900,
                              20300,
                              21400,
                              23700,
                              -10000,
                              17900,
                              17700,
                              19200,
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "£33,900",
                                "c",
                                "£29,000",
                                "c",
                                "c",
                                "£27,400",
                                "£25,200",
                                "£31,000",
                                "£24,500",
                                "c",
                                "£27,700",
                                "c",
                                "c",
                                "£25,200",
                                "£21,500",
                                "£18,200",
                                "x",
                                "£19,300",
                                "£18,100",
                                "£23,000",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "£29,400",
                                "£24,800",
                                "£32,800",
                                "£24,800",
                                "£20,100",
                                "£25,900",
                                "£32,500",
                                "£27,400",
                                "£28,100",
                                "c",
                                "£22,600",
                                "£28,100",
                                "£24,100",
                                "£24,500",
                                "£21,500",
                                "£21,000",
                                "x",
                                "£21,500",
                                "£19,300",
                                "£15,500",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "£40,200",
                                "£23,000",
                                "£30,500",
                                "£25,600",
                                "£18,600",
                                "£27,100",
                                "£28,100",
                                "£27,100",
                                "£22,800",
                                "£27,200",
                                "£25,200",
                                "£27,700",
                                "£21,900",
                                "£24,500",
                                "£19,900",
                                "£20,400",
                                "c",
                                "£21,500",
                                "£21,000",
                                "£19,300",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "£28,300",
                                "£27,400",
                                "£28,100",
                                "£28,100",
                                "c",
                                "£29,200",
                                "£27,000",
                                "£28,500",
                                "£24,500",
                                "c",
                                "c",
                                "£28,100",
                                "£20,300",
                                "£24,600",
                                "£24,100",
                                "£23,000",
                                "c",
                                "£21,000",
                                "£20,800",
                                "£24,600",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "£31,400",
                                "£31,000",
                                "£32,800",
                                "£29,600",
                                "c",
                                "£26,100",
                                "£29,600",
                                "£27,200",
                                "£27,600",
                                "c",
                                "£19,000",
                                "£30,700",
                                "£27,400",
                                "£25,200",
                                "£21,900",
                                "£21,200",
                                "c",
                                "£19,600",
                                "£20,400",
                                "£19,900",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "£38,500",
                                "£30,700",
                                "£30,300",
                                "£36,500",
                                "£43,400",
                                "£31,000",
                                "£34,300",
                                "£28,800",
                                "£29,600",
                                "c",
                                "£29,200",
                                "£25,200",
                                "£21,900",
                                "£20,800",
                                "£24,100",
                                "£24,500",
                                "c",
                                "£21,200",
                                "£21,900",
                                "£23,700",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£49,600",
                                "£39,500",
                                "£30,800",
                                "£36,000",
                                "£62,400",
                                "£33,600",
                                "£31,400",
                                "£29,900",
                                "£32,500",
                                "c",
                                "£31,400",
                                "£26,600",
                                "£26,300",
                                "£23,200",
                                "£28,100",
                                "£27,400",
                                "c",
                                "£23,800",
                                "£25,200",
                                "£22,600",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "£40,000",
                                "£34,900",
                                "£32,100",
                                "£32,200",
                                "£53,700",
                                "£31,900",
                                "£35,000",
                                "£29,200",
                                "£28,500",
                                "c",
                                "£25,000",
                                "£33,200",
                                "£28,300",
                                "£26,600",
                                "£23,400",
                                "£24,800",
                                "x",
                                "£20,100",
                                "£20,800",
                                "£23,400",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "£40,700",
                                "£26,600",
                                "£30,300",
                                "£27,700",
                                "c",
                                "£32,100",
                                "£25,600",
                                "£30,800",
                                "£24,800",
                                "c",
                                "£25,200",
                                "£24,100",
                                "£29,900",
                                "£20,300",
                                "£21,400",
                                "£23,700",
                                "c",
                                "£17,900",
                                "£17,700",
                                "£19,200",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "635a91e22de20210f5d504465f5369ab",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication",
                              "Information and communication"
                            ],
                            "group_name": [
                              "Wireless telecommunications activities",
                              "Software publishing",
                              "Computer programming; consultancy and related activities",
                              "Data processing; hosting and related activities; web portals",
                              "Other information service activities",
                              "Television programming and broadcasting activities",
                              "Other telecommunications activities",
                              "Radio broadcasting",
                              "Wired telecommunications activities",
                              "Motion picture; video and television programme activities",
                              "Sound recording and music publishing activities",
                              "Publishing of books; periodicals and other publishing activities",
                              "Satellite telecommunications activities"
                            ],
                            "North East": [
                              -10000,
                              29600,
                              32500,
                              24600,
                              -10000,
                              -10000,
                              25200,
                              -10000,
                              -10000,
                              25200,
                              -10000,
                              26600,
                              22600
                            ],
                            "North West": [
                              28700,
                              35800,
                              33600,
                              29600,
                              28500,
                              31400,
                              31000,
                              -10000,
                              -10000,
                              28700,
                              -10000,
                              27700,
                              -10000
                            ],
                            "Yorkshire and The Humber": [
                              -10000,
                              40200,
                              33000,
                              38700,
                              -10000,
                              34900,
                              29000,
                              -10000,
                              -10000,
                              26600,
                              -10000,
                              26600,
                              21200
                            ],
                            "East Midlands": [
                              36500,
                              33200,
                              33200,
                              34300,
                              41600,
                              37200,
                              30300,
                              -10000,
                              -10000,
                              27200,
                              -10000,
                              25600,
                              -10000
                            ],
                            "West Midlands": [
                              27400,
                              38000,
                              35400,
                              30500,
                              -10000,
                              29600,
                              33200,
                              "NA",
                              -10000,
                              26500,
                              -10000,
                              27400,
                              -10000
                            ],
                            "East of England": [
                              43400,
                              44300,
                              41700,
                              39400,
                              42900,
                              32800,
                              39800,
                              -10000,
                              -10000,
                              32300,
                              36900,
                              29200,
                              -10000
                            ],
                            "London": [
                              47300,
                              46000,
                              47800,
                              50400,
                              44500,
                              37600,
                              37200,
                              38000,
                              27400,
                              34700,
                              32100,
                              32500,
                              36900
                            ],
                            "South East": [
                              50400,
                              41200,
                              41200,
                              42500,
                              37600,
                              36100,
                              41200,
                              28100,
                              38700,
                              32100,
                              30800,
                              30300,
                              26300
                            ],
                            "South West": [
                              39400,
                              26100,
                              36500,
                              30700,
                              21500,
                              29200,
                              30500,
                              -10000,
                              -10000,
                              29900,
                              -10000,
                              28300,
                              -10000
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£29,600",
                                "£32,500",
                                "£24,600",
                                "c",
                                "c",
                                "£25,200",
                                "c",
                                "c",
                                "£25,200",
                                "c",
                                "£26,600",
                                "£22,600"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "£28,700",
                                "£35,800",
                                "£33,600",
                                "£29,600",
                                "£28,500",
                                "£31,400",
                                "£31,000",
                                "c",
                                "c",
                                "£28,700",
                                "c",
                                "£27,700",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£40,200",
                                "£33,000",
                                "£38,700",
                                "c",
                                "£34,900",
                                "£29,000",
                                "c",
                                "c",
                                "£26,600",
                                "c",
                                "£26,600",
                                "£21,200"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "£36,500",
                                "£33,200",
                                "£33,200",
                                "£34,300",
                                "£41,600",
                                "£37,200",
                                "£30,300",
                                "c",
                                "c",
                                "£27,200",
                                "c",
                                "£25,600",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "£27,400",
                                "£38,000",
                                "£35,400",
                                "£30,500",
                                "c",
                                "£29,600",
                                "£33,200",
                                "x",
                                "c",
                                "£26,500",
                                "c",
                                "£27,400",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "£43,400",
                                "£44,300",
                                "£41,700",
                                "£39,400",
                                "£42,900",
                                "£32,800",
                                "£39,800",
                                "c",
                                "c",
                                "£32,300",
                                "£36,900",
                                "£29,200",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£47,300",
                                "£46,000",
                                "£47,800",
                                "£50,400",
                                "£44,500",
                                "£37,600",
                                "£37,200",
                                "£38,000",
                                "£27,400",
                                "£34,700",
                                "£32,100",
                                "£32,500",
                                "£36,900"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "£50,400",
                                "£41,200",
                                "£41,200",
                                "£42,500",
                                "£37,600",
                                "£36,100",
                                "£41,200",
                                "£28,100",
                                "£38,700",
                                "£32,100",
                                "£30,800",
                                "£30,300",
                                "£26,300"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "£39,400",
                                "£26,100",
                                "£36,500",
                                "£30,700",
                                "£21,500",
                                "£29,200",
                                "£30,500",
                                "c",
                                "c",
                                "£29,900",
                                "c",
                                "£28,300",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "fb813a04c0b7efb9ac2a87cb1a00bb34",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities",
                              "Administrative and support service activities"
                            ],
                            "group_name": [
                              "Leasing of intellectual property and similar products; except copyrighted works",
                              "Investigation activities",
                              "Other human resources provision",
                              "Organisation of conventions and trade shows",
                              "Renting and leasing of motor vehicles",
                              "Activities of employment placement agencies",
                              "Office administrative and support activities",
                              "Business support service activities n.e.c.",
                              "Combined facilities support activities",
                              "Other reservation service and related activities",
                              "Renting and leasing of other machinery; equipment and tangible goods",
                              "Security systems service activities",
                              "Renting and leasing of personal and household goods",
                              "Travel agency and tour operator activities",
                              "Private security activities",
                              "Cleaning activities",
                              "Temporary employment agency activities",
                              "Landscape service activities",
                              "Activities of call centres"
                            ],
                            "North East": [
                              "NA",
                              -10000,
                              -10000,
                              "NA",
                              24800,
                              24500,
                              -10000,
                              24100,
                              24800,
                              -10000,
                              29000,
                              -10000,
                              -10000,
                              19300,
                              23700,
                              -10000,
                              20800,
                              -10000,
                              19700
                            ],
                            "North West": [
                              -10000,
                              -10000,
                              29000,
                              27900,
                              29200,
                              29700,
                              28100,
                              25600,
                              29200,
                              21000,
                              24900,
                              -10000,
                              26000,
                              23000,
                              21200,
                              21900,
                              21900,
                              23000,
                              20800
                            ],
                            "Yorkshire and The Humber": [
                              -10000,
                              "NA",
                              42900,
                              -10000,
                              30300,
                              27000,
                              23400,
                              24500,
                              25400,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              25000,
                              23700,
                              27200,
                              21900,
                              -10000,
                              19500
                            ],
                            "East Midlands": [
                              -10000,
                              -10000,
                              27000,
                              -10000,
                              28100,
                              25200,
                              35000,
                              26600,
                              30300,
                              -10000,
                              34700,
                              -10000,
                              -10000,
                              20100,
                              23700,
                              19300,
                              22600,
                              23100,
                              20800
                            ],
                            "West Midlands": [
                              -10000,
                              "NA",
                              30700,
                              27000,
                              29600,
                              27600,
                              21700,
                              26600,
                              27900,
                              -10000,
                              23400,
                              -10000,
                              -10000,
                              24100,
                              23700,
                              24100,
                              22800,
                              22600,
                              17900
                            ],
                            "East of England": [
                              -10000,
                              -10000,
                              37600,
                              31800,
                              29600,
                              32600,
                              35200,
                              32500,
                              30300,
                              -10000,
                              31800,
                              -10000,
                              -10000,
                              26600,
                              28800,
                              29600,
                              27000,
                              -10000,
                              21000
                            ],
                            "London": [
                              -10000,
                              -10000,
                              37200,
                              33800,
                              38700,
                              34300,
                              42300,
                              38300,
                              32500,
                              36900,
                              33600,
                              44200,
                              27700,
                              29200,
                              26300,
                              24800,
                              27400,
                              25700,
                              20600
                            ],
                            "South East": [
                              -10000,
                              -10000,
                              36900,
                              35600,
                              32100,
                              34300,
                              29400,
                              32400,
                              32300,
                              28800,
                              28700,
                              -10000,
                              -10000,
                              29200,
                              24500,
                              24100,
                              25600,
                              23700,
                              23000
                            ],
                            "South West": [
                              -10000,
                              -10000,
                              32100,
                              29600,
                              29700,
                              28800,
                              20400,
                              27200,
                              23700,
                              -10000,
                              32200,
                              -10000,
                              -10000,
                              25600,
                              22600,
                              22800,
                              24100,
                              23400,
                              19500
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "c",
                                "c",
                                "x",
                                "£24,800",
                                "£24,500",
                                "c",
                                "£24,100",
                                "£24,800",
                                "c",
                                "£29,000",
                                "c",
                                "c",
                                "£19,300",
                                "£23,700",
                                "c",
                                "£20,800",
                                "c",
                                "£19,700"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "£29,000",
                                "£27,900",
                                "£29,200",
                                "£29,700",
                                "£28,100",
                                "£25,600",
                                "£29,200",
                                "£21,000",
                                "£24,900",
                                "c",
                                "£26,000",
                                "£23,000",
                                "£21,200",
                                "£21,900",
                                "£21,900",
                                "£23,000",
                                "£20,800"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "x",
                                "£42,900",
                                "c",
                                "£30,300",
                                "£27,000",
                                "£23,400",
                                "£24,500",
                                "£25,400",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£25,000",
                                "£23,700",
                                "£27,200",
                                "£21,900",
                                "c",
                                "£19,500"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "£27,000",
                                "c",
                                "£28,100",
                                "£25,200",
                                "£35,000",
                                "£26,600",
                                "£30,300",
                                "c",
                                "£34,700",
                                "c",
                                "c",
                                "£20,100",
                                "£23,700",
                                "£19,300",
                                "£22,600",
                                "£23,100",
                                "£20,800"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "x",
                                "£30,700",
                                "£27,000",
                                "£29,600",
                                "£27,600",
                                "£21,700",
                                "£26,600",
                                "£27,900",
                                "c",
                                "£23,400",
                                "c",
                                "c",
                                "£24,100",
                                "£23,700",
                                "£24,100",
                                "£22,800",
                                "£22,600",
                                "£17,900"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "£37,600",
                                "£31,800",
                                "£29,600",
                                "£32,600",
                                "£35,200",
                                "£32,500",
                                "£30,300",
                                "c",
                                "£31,800",
                                "c",
                                "c",
                                "£26,600",
                                "£28,800",
                                "£29,600",
                                "£27,000",
                                "c",
                                "£21,000"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "£37,200",
                                "£33,800",
                                "£38,700",
                                "£34,300",
                                "£42,300",
                                "£38,300",
                                "£32,500",
                                "£36,900",
                                "£33,600",
                                "£44,200",
                                "£27,700",
                                "£29,200",
                                "£26,300",
                                "£24,800",
                                "£27,400",
                                "£25,700",
                                "£20,600"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "£36,900",
                                "£35,600",
                                "£32,100",
                                "£34,300",
                                "£29,400",
                                "£32,400",
                                "£32,300",
                                "£28,800",
                                "£28,700",
                                "c",
                                "c",
                                "£29,200",
                                "£24,500",
                                "£24,100",
                                "£25,600",
                                "£23,700",
                                "£23,000"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "£32,100",
                                "£29,600",
                                "£29,700",
                                "£28,800",
                                "£20,400",
                                "£27,200",
                                "£23,700",
                                "c",
                                "£32,200",
                                "c",
                                "c",
                                "£25,600",
                                "£22,600",
                                "£22,800",
                                "£24,100",
                                "£23,400",
                                "£19,500"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "3ab692ac2f129a3523dafb1e8c16a782",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Public administration and defence - compulsory social security",
                              "Public administration and defence - compulsory social security",
                              "Public administration and defence - compulsory social security"
                            ],
                            "group_name": [
                              "Administration of the State and the economic and social policy of the community",
                              "Provision of services to the community as a whole",
                              "Compulsory social security activities"
                            ],
                            "North East": [
                              27000,
                              25900,
                              25900
                            ],
                            "North West": [
                              27700,
                              27000,
                              26300
                            ],
                            "Yorkshire and The Humber": [
                              27700,
                              27400,
                              25900
                            ],
                            "East Midlands": [
                              28500,
                              27400,
                              25700
                            ],
                            "West Midlands": [
                              29900,
                              27000,
                              25900
                            ],
                            "East of England": [
                              31000,
                              29200,
                              28800
                            ],
                            "London": [
                              36900,
                              32800,
                              29600
                            ],
                            "South East": [
                              31800,
                              29900,
                              27400
                            ],
                            "South West": [
                              27400,
                              29200,
                              25900
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "£27,000",
                                "£25,900",
                                "£25,900"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "£27,700",
                                "£27,000",
                                "£26,300"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "£27,700",
                                "£27,400",
                                "£25,900"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "£28,500",
                                "£27,400",
                                "£25,700"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "£29,900",
                                "£27,000",
                                "£25,900"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "£31,000",
                                "£29,200",
                                "£28,800"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£36,900",
                                "£32,800",
                                "£29,600"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "£31,800",
                                "£29,900",
                                "£27,400"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "£27,400",
                                "£29,200",
                                "£25,900"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "54f68bab1b12b223da8b0ebeacb45a2e",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities",
                              "Financial and insurance activities"
                            ],
                            "group_name": [
                              "Fund management activities",
                              "Trusts; funds and similar financial entities",
                              "Reinsurance",
                              "Activities auxiliary to financial services; except insurance and pension funding",
                              "Monetary intermediation",
                              "Other financial service activities; except insurance and pension funding",
                              "Activities auxiliary to insurance and pension funding",
                              "Activities of holding companies",
                              "Insurance",
                              "Pension funding"
                            ],
                            "North East": [
                              -10000,
                              "NA",
                              "NA",
                              26600,
                              24800,
                              30700,
                              23400,
                              "NA",
                              21500,
                              "NA"
                            ],
                            "North West": [
                              33000,
                              -10000,
                              "NA",
                              28300,
                              28500,
                              31000,
                              24800,
                              -10000,
                              26100,
                              "NA"
                            ],
                            "Yorkshire and The Humber": [
                              40500,
                              -10000,
                              "NA",
                              26600,
                              27400,
                              28300,
                              27000,
                              42000,
                              24100,
                              "NA"
                            ],
                            "East Midlands": [
                              72600,
                              -10000,
                              "NA",
                              33600,
                              30100,
                              37800,
                              27000,
                              -10000,
                              27900,
                              "NA"
                            ],
                            "West Midlands": [
                              36100,
                              -10000,
                              -10000,
                              31200,
                              27000,
                              29200,
                              26300,
                              -10000,
                              30300,
                              "NA"
                            ],
                            "East of England": [
                              54600,
                              -10000,
                              -10000,
                              44200,
                              54000,
                              40900,
                              36700,
                              27400,
                              31800,
                              "NA"
                            ],
                            "London": [
                              67900,
                              63300,
                              50600,
                              58000,
                              59500,
                              56900,
                              46700,
                              37200,
                              52200,
                              -10000
                            ],
                            "South East": [
                              58600,
                              70400,
                              -10000,
                              41200,
                              47800,
                              35400,
                              34700,
                              -10000,
                              36500,
                              -10000
                            ],
                            "South West": [
                              43800,
                              -10000,
                              "NA",
                              30700,
                              35000,
                              32700,
                              28800,
                              -10000,
                              29900,
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "x",
                                "x",
                                "£26,600",
                                "£24,800",
                                "£30,700",
                                "£23,400",
                                "x",
                                "£21,500",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "£33,000",
                                "c",
                                "x",
                                "£28,300",
                                "£28,500",
                                "£31,000",
                                "£24,800",
                                "c",
                                "£26,100",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "£40,500",
                                "c",
                                "x",
                                "£26,600",
                                "£27,400",
                                "£28,300",
                                "£27,000",
                                "£42,000",
                                "£24,100",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "£72,600",
                                "c",
                                "x",
                                "£33,600",
                                "£30,100",
                                "£37,800",
                                "£27,000",
                                "c",
                                "£27,900",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "£36,100",
                                "c",
                                "c",
                                "£31,200",
                                "£27,000",
                                "£29,200",
                                "£26,300",
                                "c",
                                "£30,300",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "£54,600",
                                "c",
                                "c",
                                "£44,200",
                                "£54,000",
                                "£40,900",
                                "£36,700",
                                "£27,400",
                                "£31,800",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£67,900",
                                "£63,300",
                                "£50,600",
                                "£58,000",
                                "£59,500",
                                "£56,900",
                                "£46,700",
                                "£37,200",
                                "£52,200",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "£58,600",
                                "£70,400",
                                "c",
                                "£41,200",
                                "£47,800",
                                "£35,400",
                                "£34,700",
                                "c",
                                "£36,500",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "£43,800",
                                "c",
                                "x",
                                "£30,700",
                                "£35,000",
                                "£32,700",
                                "£28,800",
                                "c",
                                "£29,900",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "143d73ccf2708ea14e3adced1d0b6e64",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing",
                              "Manufacturing"
                            ],
                            "group_name": [
                              "Manufacture of refined petroleum products",
                              "Manufacture of basic precious and other non-ferrous metals",
                              "Manufacture of motor vehicles",
                              "Manufacture of railway locomotives and rolling stock",
                              "Manufacture of air and spacecraft and related machinery",
                              "Manufacture of pharmaceutical preparations",
                              "Manufacture of grain mill products; starches and starch products",
                              "Manufacture of weapons and ammunition",
                              "Building of ships and boats",
                              "Manufacture of basic iron and steel and of ferro-alloys",
                              "Manufacture of general-purpose machinery",
                              "Manufacture of instruments and appliances for measuring; testing and navigation; watches and clocks",
                              "Manufacture of agricultural and forestry machinery",
                              "Manufacture of irradiation; electromedical and electrotherapeutic equipment",
                              "Installation of industrial machinery and equipment",
                              "Manufacture of consumer electronics",
                              "Manufacture of military fighting vehicles",
                              "Manufacture of other special-purpose machinery",
                              "Manufacture of abrasive products and non-metallic mineral products n.e.c.",
                              "Manufacture of parts and accessories for motor vehicles",
                              "Processing and preserving of fruit and vegetables",
                              "Manufacture of optical instruments and photographic equipment",
                              "Manufacture of wiring and wiring devices",
                              "Manufacture of basic chemicals; fertilisers and nitrogen compounds; plastics and synthetic rubber in primary forms",
                              "Manufacture of electric motors; generators; transformers and electricity distribution and control apparatus",
                              "Manufacture of other general-purpose machinery",
                              "Manufacture of transport equipment n.e.c.",
                              "Forging; pressing; stamping and roll-forming of metal; powder metallurgy",
                              "Manufacture of communication equipment",
                              "Manufacture of cutlery; tools and general hardware",
                              "Manufacture of other food products",
                              "Manufacture of beverages",
                              "Manufacture of medical and dental instruments and supplies",
                              "Manufacture of pulp; paper and paperboard",
                              "Manufacture of basic pharmaceutical products",
                              "Manufacture of other electrical equipment",
                              "Manufacture of other products of first processing of steel",
                              "Processing and preserving of meat and production of meat products",
                              "Manufacture of metal forming machinery and machine tools",
                              "Manufacture of other chemical products",
                              "Manufacture of computers and peripheral equipment",
                              "Manufacture of articles of concrete; cement and plaster",
                              "Manufacture of dairy products",
                              "Manufacture of prepared animal feeds",
                              "Manufacture of tanks; reservoirs and containers of metal",
                              "Manufacture of structural metal products",
                              "Manufacture of glass and glass products",
                              "Manufacture of paints; varnishes and similar coatings; printing ink and mastics",
                              "Manufacture of jewellery; bijouterie and related articles",
                              "Treatment and coating of metals; machining",
                              "Manufacture of electric lighting equipment",
                              "Manufacturing n.e.c.",
                              "Manufacture of rubber products",
                              "Manufacture of soap and detergents; cleaning and polishing preparations; perfumes and toilet preparations",
                              "Manufacture of bodies (coachwork) for motor vehicles; manufacture of trailers and semi-trailers",
                              "Manufacture of electronic components and boards",
                              "Processing and preserving of fish; crustaceans and molluscs",
                              "Tanning and dressing of leather; manufacture of luggage; handbags; saddlery and harness; dressing and dyeing of fur",
                              "Manufacture of plastics products",
                              "Repair of fabricated metal products; machinery and equipment",
                              "Manufacture of sports goods",
                              "Manufacture of furniture",
                              "Manufacture of games and toys",
                              "Manufacture of other fabricated metal products",
                              "Casting of metals",
                              "Manufacture of articles of paper and paperboard ",
                              "Manufacture of bakery and farinaceous products",
                              "Manufacture of clay building materials",
                              "Manufacture of footwear",
                              "Manufacture of domestic appliances",
                              "Manufacture of wearing apparel; except fur apparel",
                              "Printing and service activities related to printing",
                              "Manufacture of other porcelain and ceramic products",
                              "Manufacture of products of wood; cork; straw and plaiting materials",
                              "Reproduction of recorded media",
                              "Manufacture of other textiles",
                              "Cutting; shaping and finishing of stone",
                              "Finishing of textiles",
                              "Manufacture of batteries and accumulators",
                              "Manufacture of cement; lime and plaster",
                              "Manufacture of knitted and crocheted apparel",
                              "Manufacture of musical instruments",
                              "Manufacture of pesticides and other agrochemical products",
                              "Manufacture of refractory products",
                              "Manufacture of steam generators; except central heating hot water boilers",
                              "Manufacture of tubes; pipes; hollow profiles and related fittings; of steel",
                              "Manufacture of vegetable and animal oils and fats",
                              "Preparation and spinning of textile fibres",
                              "Sawmilling and planing of wood",
                              "Weaving of textiles"
                            ],
                            "North East": [
                              -10000,
                              "NA",
                              39200,
                              "NA",
                              -10000,
                              33200,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              39100,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              "NA",
                              "NA",
                              40900,
                              -10000,
                              34900,
                              -10000,
                              "NA",
                              -10000,
                              31400,
                              -10000,
                              30300,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              25200,
                              -10000,
                              "NA",
                              -10000,
                              "NA",
                              "NA",
                              -10000,
                              -10000,
                              33200,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              31000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              -10000,
                              26300,
                              "NA",
                              25400,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              25200,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              23000,
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "North West": [
                              54000,
                              44900,
                              43800,
                              "NA",
                              41100,
                              39800,
                              40300,
                              -10000,
                              38000,
                              "NA",
                              35200,
                              37200,
                              -10000,
                              "NA",
                              -10000,
                              "NA",
                              "NA",
                              27400,
                              -10000,
                              -10000,
                              35400,
                              -10000,
                              -10000,
                              37600,
                              -10000,
                              31000,
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              28500,
                              29400,
                              -10000,
                              -10000,
                              29600,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              29000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              29900,
                              28500,
                              32700,
                              "NA",
                              33900,
                              -10000,
                              24100,
                              32100,
                              27400,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              28100,
                              21500,
                              -10000,
                              27400,
                              "NA",
                              24800,
                              -10000,
                              24100,
                              29400,
                              "NA",
                              -10000,
                              -10000,
                              25600,
                              23700,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              -10000,
                              -10000
                            ],
                            "Yorkshire and The Humber": [
                              -10000,
                              -10000,
                              38300,
                              -10000,
                              39800,
                              32800,
                              -10000,
                              -10000,
                              -10000,
                              40700,
                              37200,
                              34700,
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              32500,
                              -10000,
                              -10000,
                              32800,
                              -10000,
                              34700,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              31400,
                              31000,
                              33900,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              28500,
                              -10000,
                              31200,
                              -10000,
                              26600,
                              -10000,
                              -10000,
                              -10000,
                              31800,
                              -10000,
                              29400,
                              -10000,
                              29400,
                              -10000,
                              -10000,
                              -10000,
                              26300,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              31400,
                              23900,
                              -10000,
                              25600,
                              -10000,
                              31800,
                              -10000,
                              -10000,
                              23000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              23700,
                              -10000,
                              -10000,
                              "NA",
                              24100,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000
                            ],
                            "East Midlands": [
                              -10000,
                              -10000,
                              40900,
                              41200,
                              42000,
                              33800,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              37800,
                              36100,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              30800,
                              -10000,
                              33900,
                              29900,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              31800,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              31400,
                              29700,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              31400,
                              -10000,
                              34500,
                              -10000,
                              -10000,
                              -10000,
                              39400,
                              -10000,
                              -10000,
                              -10000,
                              28700,
                              -10000,
                              -10000,
                              -10000,
                              23700,
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              24500,
                              27900,
                              -10000,
                              31400,
                              28100,
                              31400,
                              -10000,
                              26300,
                              29600,
                              -10000,
                              -10000,
                              -10000,
                              21500,
                              27900,
                              -10000,
                              24100,
                              "NA",
                              22600,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              "NA",
                              "NA",
                              -10000,
                              "NA"
                            ],
                            "West Midlands": [
                              -10000,
                              -10000,
                              43100,
                              -10000,
                              41600,
                              45300,
                              -10000,
                              -10000,
                              -10000,
                              32500,
                              42000,
                              37000,
                              -10000,
                              -10000,
                              39400,
                              -10000,
                              "NA",
                              35000,
                              -10000,
                              35000,
                              32800,
                              -10000,
                              -10000,
                              34700,
                              -10000,
                              30300,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              27700,
                              27700,
                              27700,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              38700,
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              32100,
                              -10000,
                              -10000,
                              27700,
                              -10000,
                              -10000,
                              -10000,
                              28100,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              24500,
                              30300,
                              -10000,
                              26600,
                              -10000,
                              25900,
                              -10000,
                              27000,
                              19000,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              23700,
                              25700,
                              26300,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              -10000,
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "East of England": [
                              -10000,
                              -10000,
                              49600,
                              -10000,
                              41200,
                              46200,
                              -10000,
                              41200,
                              -10000,
                              -10000,
                              43800,
                              42000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              38500,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              33000,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              34700,
                              31000,
                              42500,
                              "NA",
                              -10000,
                              -10000,
                              "NA",
                              28800,
                              "NA",
                              32500,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              30100,
                              -10000,
                              -10000,
                              -10000,
                              28800,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              24100,
                              -10000,
                              -10000,
                              28800,
                              34700,
                              -10000,
                              32800,
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              30300,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              25000,
                              -10000,
                              23700,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              -10000
                            ],
                            "London": [
                              -10000,
                              "NA",
                              47400,
                              -10000,
                              40700,
                              45300,
                              -10000,
                              35400,
                              -10000,
                              "NA",
                              -10000,
                              39200,
                              -10000,
                              36100,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              36500,
                              "NA",
                              36900,
                              -10000,
                              -10000,
                              38000,
                              -10000,
                              "NA",
                              34700,
                              -10000,
                              42000,
                              44000,
                              33300,
                              -10000,
                              36100,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              37200,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              29900,
                              -10000,
                              -10000,
                              39800,
                              "NA",
                              35800,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              31800,
                              36900,
                              -10000,
                              32300,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              27400,
                              "NA",
                              -10000,
                              "NA",
                              28500,
                              31000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              -10000,
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "South East": [
                              50900,
                              -10000,
                              45300,
                              -10000,
                              39100,
                              46200,
                              -10000,
                              36500,
                              37800,
                              -10000,
                              35400,
                              38000,
                              -10000,
                              -10000,
                              38500,
                              -10000,
                              -10000,
                              35400,
                              -10000,
                              -10000,
                              35000,
                              -10000,
                              32300,
                              -10000,
                              42000,
                              34300,
                              -10000,
                              -10000,
                              31800,
                              -10000,
                              42500,
                              29900,
                              34900,
                              "NA",
                              32800,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              29400,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              32800,
                              "NA",
                              -10000,
                              -10000,
                              26600,
                              29200,
                              -10000,
                              -10000,
                              29900,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              28800,
                              33200,
                              -10000,
                              28800,
                              -10000,
                              -10000,
                              -10000,
                              29900,
                              23400,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              26500,
                              -10000,
                              24800,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              -10000,
                              "NA"
                            ],
                            "South West": [
                              "NA",
                              "NA",
                              -10000,
                              -10000,
                              41600,
                              35800,
                              -10000,
                              41400,
                              38000,
                              -10000,
                              36100,
                              36900,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              35000,
                              32800,
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              28100,
                              24100,
                              27000,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              32500,
                              -10000,
                              -10000,
                              -10000,
                              33600,
                              -10000,
                              -10000,
                              29200,
                              24800,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              28100,
                              31400,
                              -10000,
                              22600,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              31600,
                              -10000,
                              24600,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "x",
                                "£39,200",
                                "x",
                                "c",
                                "£33,200",
                                "c",
                                "c",
                                "x",
                                "c",
                                "£39,100",
                                "c",
                                "c",
                                "x",
                                "c",
                                "x",
                                "x",
                                "£40,900",
                                "c",
                                "£34,900",
                                "c",
                                "x",
                                "c",
                                "£31,400",
                                "c",
                                "£30,300",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£25,200",
                                "c",
                                "x",
                                "c",
                                "x",
                                "x",
                                "c",
                                "c",
                                "£33,200",
                                "c",
                                "c",
                                "c",
                                "x",
                                "c",
                                "c",
                                "c",
                                "c",
                                "x",
                                "£31,000",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "x",
                                "x",
                                "c",
                                "£26,300",
                                "x",
                                "£25,400",
                                "c",
                                "c",
                                "x",
                                "c",
                                "£25,200",
                                "c",
                                "c",
                                "x",
                                "c",
                                "£23,000",
                                "c",
                                "c",
                                "x",
                                "x",
                                "c",
                                "c",
                                "c",
                                "x",
                                "x",
                                "x",
                                "c",
                                "c",
                                "x",
                                "c",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "£54,000",
                                "£44,900",
                                "£43,800",
                                "x",
                                "£41,100",
                                "£39,800",
                                "£40,300",
                                "c",
                                "£38,000",
                                "x",
                                "£35,200",
                                "£37,200",
                                "c",
                                "x",
                                "c",
                                "x",
                                "x",
                                "£27,400",
                                "c",
                                "c",
                                "£35,400",
                                "c",
                                "c",
                                "£37,600",
                                "c",
                                "£31,000",
                                "x",
                                "c",
                                "c",
                                "c",
                                "£28,500",
                                "£29,400",
                                "c",
                                "c",
                                "£29,600",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£29,000",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£29,900",
                                "£28,500",
                                "£32,700",
                                "x",
                                "£33,900",
                                "c",
                                "£24,100",
                                "£32,100",
                                "£27,400",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£28,100",
                                "£21,500",
                                "c",
                                "£27,400",
                                "x",
                                "£24,800",
                                "c",
                                "£24,100",
                                "£29,400",
                                "x",
                                "c",
                                "c",
                                "£25,600",
                                "£23,700",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "x",
                                "c",
                                "c",
                                "x",
                                "x",
                                "x",
                                "c",
                                "c",
                                "x",
                                "x",
                                "c",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "£38,300",
                                "c",
                                "£39,800",
                                "£32,800",
                                "c",
                                "c",
                                "c",
                                "£40,700",
                                "£37,200",
                                "£34,700",
                                "x",
                                "c",
                                "c",
                                "c",
                                "x",
                                "c",
                                "c",
                                "c",
                                "£32,500",
                                "c",
                                "c",
                                "£32,800",
                                "c",
                                "£34,700",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£31,400",
                                "£31,000",
                                "£33,900",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£28,500",
                                "c",
                                "£31,200",
                                "c",
                                "£26,600",
                                "c",
                                "c",
                                "c",
                                "£31,800",
                                "c",
                                "£29,400",
                                "c",
                                "£29,400",
                                "c",
                                "c",
                                "c",
                                "£26,300",
                                "c",
                                "c",
                                "c",
                                "x",
                                "£31,400",
                                "£23,900",
                                "c",
                                "£25,600",
                                "c",
                                "£31,800",
                                "c",
                                "c",
                                "£23,000",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£23,700",
                                "c",
                                "c",
                                "x",
                                "£24,100",
                                "c",
                                "c",
                                "x",
                                "c",
                                "x",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "£40,900",
                                "£41,200",
                                "£42,000",
                                "£33,800",
                                "c",
                                "c",
                                "x",
                                "c",
                                "£37,800",
                                "£36,100",
                                "c",
                                "c",
                                "c",
                                "x",
                                "x",
                                "£30,800",
                                "c",
                                "£33,900",
                                "£29,900",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£31,800",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£31,400",
                                "£29,700",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£31,400",
                                "c",
                                "£34,500",
                                "c",
                                "c",
                                "c",
                                "£39,400",
                                "c",
                                "c",
                                "c",
                                "£28,700",
                                "c",
                                "c",
                                "c",
                                "£23,700",
                                "c",
                                "c",
                                "x",
                                "x",
                                "£24,500",
                                "£27,900",
                                "c",
                                "£31,400",
                                "£28,100",
                                "£31,400",
                                "c",
                                "£26,300",
                                "£29,600",
                                "c",
                                "c",
                                "c",
                                "£21,500",
                                "£27,900",
                                "c",
                                "£24,100",
                                "x",
                                "£22,600",
                                "c",
                                "c",
                                "x",
                                "c",
                                "c",
                                "x",
                                "c",
                                "c",
                                "x",
                                "c",
                                "x",
                                "x",
                                "c",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "£43,100",
                                "c",
                                "£41,600",
                                "£45,300",
                                "c",
                                "c",
                                "c",
                                "£32,500",
                                "£42,000",
                                "£37,000",
                                "c",
                                "c",
                                "£39,400",
                                "c",
                                "x",
                                "£35,000",
                                "c",
                                "£35,000",
                                "£32,800",
                                "c",
                                "c",
                                "£34,700",
                                "c",
                                "£30,300",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£27,700",
                                "£27,700",
                                "£27,700",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£38,700",
                                "x",
                                "c",
                                "c",
                                "c",
                                "£32,100",
                                "c",
                                "c",
                                "£27,700",
                                "c",
                                "c",
                                "c",
                                "£28,100",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "x",
                                "c",
                                "£24,500",
                                "£30,300",
                                "c",
                                "£26,600",
                                "c",
                                "£25,900",
                                "c",
                                "£27,000",
                                "£19,000",
                                "c",
                                "x",
                                "c",
                                "c",
                                "£23,700",
                                "£25,700",
                                "£26,300",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "c",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "£49,600",
                                "c",
                                "£41,200",
                                "£46,200",
                                "c",
                                "£41,200",
                                "c",
                                "c",
                                "£43,800",
                                "£42,000",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£38,500",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£33,000",
                                "c",
                                "x",
                                "c",
                                "c",
                                "£34,700",
                                "£31,000",
                                "£42,500",
                                "x",
                                "c",
                                "c",
                                "x",
                                "£28,800",
                                "x",
                                "£32,500",
                                "c",
                                "c",
                                "x",
                                "c",
                                "c",
                                "£30,100",
                                "c",
                                "c",
                                "c",
                                "£28,800",
                                "c",
                                "c",
                                "x",
                                "c",
                                "c",
                                "£24,100",
                                "c",
                                "c",
                                "£28,800",
                                "£34,700",
                                "c",
                                "£32,800",
                                "x",
                                "c",
                                "c",
                                "c",
                                "£30,300",
                                "c",
                                "c",
                                "x",
                                "c",
                                "£25,000",
                                "c",
                                "£23,700",
                                "c",
                                "c",
                                "c",
                                "c",
                                "x",
                                "x",
                                "x",
                                "x",
                                "c",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "x",
                                "£47,400",
                                "c",
                                "£40,700",
                                "£45,300",
                                "c",
                                "£35,400",
                                "c",
                                "x",
                                "c",
                                "£39,200",
                                "c",
                                "£36,100",
                                "c",
                                "c",
                                "x",
                                "c",
                                "c",
                                "c",
                                "£36,500",
                                "x",
                                "£36,900",
                                "c",
                                "c",
                                "£38,000",
                                "c",
                                "x",
                                "£34,700",
                                "c",
                                "£42,000",
                                "£44,000",
                                "£33,300",
                                "c",
                                "£36,100",
                                "c",
                                "c",
                                "c",
                                "x",
                                "£37,200",
                                "c",
                                "c",
                                "c",
                                "c",
                                "x",
                                "c",
                                "c",
                                "c",
                                "£29,900",
                                "c",
                                "c",
                                "£39,800",
                                "x",
                                "£35,800",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£31,800",
                                "£36,900",
                                "c",
                                "£32,300",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£27,400",
                                "x",
                                "c",
                                "x",
                                "£28,500",
                                "£31,000",
                                "c",
                                "c",
                                "c",
                                "c",
                                "x",
                                "c",
                                "x",
                                "x",
                                "x",
                                "c",
                                "x",
                                "x",
                                "x",
                                "x",
                                "c",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "£50,900",
                                "c",
                                "£45,300",
                                "c",
                                "£39,100",
                                "£46,200",
                                "c",
                                "£36,500",
                                "£37,800",
                                "c",
                                "£35,400",
                                "£38,000",
                                "c",
                                "c",
                                "£38,500",
                                "c",
                                "c",
                                "£35,400",
                                "c",
                                "c",
                                "£35,000",
                                "c",
                                "£32,300",
                                "c",
                                "£42,000",
                                "£34,300",
                                "c",
                                "c",
                                "£31,800",
                                "c",
                                "£42,500",
                                "£29,900",
                                "£34,900",
                                "x",
                                "£32,800",
                                "c",
                                "x",
                                "c",
                                "c",
                                "£29,400",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£32,800",
                                "x",
                                "c",
                                "c",
                                "£26,600",
                                "£29,200",
                                "c",
                                "c",
                                "£29,900",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£28,800",
                                "£33,200",
                                "c",
                                "£28,800",
                                "c",
                                "c",
                                "c",
                                "£29,900",
                                "£23,400",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£26,500",
                                "c",
                                "£24,800",
                                "c",
                                "c",
                                "x",
                                "c",
                                "x",
                                "x",
                                "x",
                                "x",
                                "c",
                                "x",
                                "c",
                                "c",
                                "x",
                                "x",
                                "c",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "c",
                                "c",
                                "£41,600",
                                "£35,800",
                                "c",
                                "£41,400",
                                "£38,000",
                                "c",
                                "£36,100",
                                "£36,900",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£35,000",
                                "£32,800",
                                "x",
                                "c",
                                "c",
                                "c",
                                "£28,100",
                                "£24,100",
                                "£27,000",
                                "c",
                                "c",
                                "c",
                                "x",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£32,500",
                                "c",
                                "c",
                                "c",
                                "£33,600",
                                "c",
                                "c",
                                "£29,200",
                                "£24,800",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£28,100",
                                "£31,400",
                                "c",
                                "£22,600",
                                "c",
                                "c",
                                "x",
                                "c",
                                "c",
                                "c",
                                "x",
                                "£31,600",
                                "c",
                                "£24,600",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "207aea9af742d2c10126f6cab189020f",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities",
                              "Accommodation and food service activities"
                            ],
                            "group_name": [
                              "Other accommodation",
                              "Event catering and other food service activities",
                              "Hotels and similar accommodation",
                              "Camping grounds; recreational vehicle parks and trailer parks",
                              "Holiday and other short-stay accommodation",
                              "Beverage serving activities",
                              "Restaurants and mobile food service activities"
                            ],
                            "North East": [
                              -10000,
                              20400,
                              21200,
                              -10000,
                              -10000,
                              17200,
                              18600
                            ],
                            "North West": [
                              -10000,
                              22600,
                              21400,
                              -10000,
                              21200,
                              19700,
                              19300
                            ],
                            "Yorkshire and The Humber": [
                              -10000,
                              24800,
                              22100,
                              -10000,
                              -10000,
                              19000,
                              18300
                            ],
                            "East Midlands": [
                              -10000,
                              23200,
                              20800,
                              19700,
                              19900,
                              19700,
                              19300
                            ],
                            "West Midlands": [
                              -10000,
                              25200,
                              22300,
                              -10000,
                              -10000,
                              20100,
                              18400
                            ],
                            "East of England": [
                              -10000,
                              23500,
                              25900,
                              -10000,
                              20400,
                              20100,
                              21500
                            ],
                            "London": [
                              27400,
                              27400,
                              24500,
                              -10000,
                              30300,
                              23700,
                              23700
                            ],
                            "South East": [
                              -10000,
                              24500,
                              25900,
                              21900,
                              -10000,
                              21200,
                              21800
                            ],
                            "South West": [
                              -10000,
                              19300,
                              21500,
                              22600,
                              22800,
                              19500,
                              18100
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£20,400",
                                "£21,200",
                                "c",
                                "c",
                                "£17,200",
                                "£18,600"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£22,600",
                                "£21,400",
                                "c",
                                "£21,200",
                                "£19,700",
                                "£19,300"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£24,800",
                                "£22,100",
                                "c",
                                "c",
                                "£19,000",
                                "£18,300"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£23,200",
                                "£20,800",
                                "£19,700",
                                "£19,900",
                                "£19,700",
                                "£19,300"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£25,200",
                                "£22,300",
                                "c",
                                "c",
                                "£20,100",
                                "£18,400"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£23,500",
                                "£25,900",
                                "c",
                                "£20,400",
                                "£20,100",
                                "£21,500"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£27,400",
                                "£27,400",
                                "£24,500",
                                "c",
                                "£30,300",
                                "£23,700",
                                "£23,700"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£24,500",
                                "£25,900",
                                "£21,900",
                                "c",
                                "£21,200",
                                "£21,800"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£19,300",
                                "£21,500",
                                "£22,600",
                                "£22,800",
                                "£19,500",
                                "£18,100"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "2495453e7d851fc0a58ff6600eb4fe9a",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Arts, entertainment and recreation",
                              "Arts, entertainment and recreation",
                              "Arts, entertainment and recreation",
                              "Arts, entertainment and recreation",
                              "Arts, entertainment and recreation"
                            ],
                            "group_name": [
                              "Gambling and betting activities",
                              "Creative; arts and entertainment activities",
                              "Sports activities",
                              "Libraries; archives; museums and other cultural activities",
                              "Amusement and recreation activities"
                            ],
                            "North East": [
                              21900,
                              16300,
                              19700,
                              19300,
                              14400
                            ],
                            "North West": [
                              27400,
                              21200,
                              22300,
                              21200,
                              19700
                            ],
                            "Yorkshire and The Humber": [
                              39800,
                              22600,
                              22900,
                              21200,
                              17200
                            ],
                            "East Midlands": [
                              20100,
                              21500,
                              23400,
                              19000,
                              19700
                            ],
                            "West Midlands": [
                              30700,
                              23700,
                              21500,
                              22100,
                              20800
                            ],
                            "East of England": [
                              29900,
                              27400,
                              25200,
                              23000,
                              23200
                            ],
                            "London": [
                              31800,
                              27900,
                              27700,
                              25600,
                              23000
                            ],
                            "South East": [
                              27700,
                              24100,
                              27000,
                              24600,
                              23700
                            ],
                            "South West": [
                              -10000,
                              22600,
                              22300,
                              20800,
                              20600
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "£21,900",
                                "£16,300",
                                "£19,700",
                                "£19,300",
                                "£14,400"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "£27,400",
                                "£21,200",
                                "£22,300",
                                "£21,200",
                                "£19,700"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "£39,800",
                                "£22,600",
                                "£22,900",
                                "£21,200",
                                "£17,200"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "£20,100",
                                "£21,500",
                                "£23,400",
                                "£19,000",
                                "£19,700"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "£30,700",
                                "£23,700",
                                "£21,500",
                                "£22,100",
                                "£20,800"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "£29,900",
                                "£27,400",
                                "£25,200",
                                "£23,000",
                                "£23,200"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£31,800",
                                "£27,900",
                                "£27,700",
                                "£25,600",
                                "£23,000"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "£27,700",
                                "£24,100",
                                "£27,000",
                                "£24,600",
                                "£23,700"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£22,600",
                                "£22,300",
                                "£20,800",
                                "£20,600"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "6e76e0a6a0b8e6ee0d3f42227b91abf6",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage",
                              "Transportation and storage"
                            ],
                            "group_name": [
                              "Freight rail transport",
                              "Other passenger land transport ",
                              "Passenger rail transport; interurban",
                              "Support activities for transportation",
                              "Transport via pipeline",
                              "Sea and coastal freight water transport",
                              "Warehousing and storage",
                              "Other postal and courier activities",
                              "Passenger air transport",
                              "Freight transport by road and removal services",
                              "Postal activities under universal service obligation",
                              "Sea and coastal passenger water transport",
                              "Freight air transport and space transport",
                              "Inland passenger water transport"
                            ],
                            "North East": [
                              "NA",
                              23000,
                              -10000,
                              35200,
                              -10000,
                              -10000,
                              24100,
                              -10000,
                              24800,
                              21500,
                              25900,
                              -10000,
                              "NA",
                              "NA"
                            ],
                            "North West": [
                              -10000,
                              29900,
                              33000,
                              29600,
                              "NA",
                              -10000,
                              29000,
                              22600,
                              26800,
                              29200,
                              22800,
                              "NA",
                              -10000,
                              "NA"
                            ],
                            "Yorkshire and The Humber": [
                              -10000,
                              24800,
                              32500,
                              29600,
                              -10000,
                              "NA",
                              29200,
                              28500,
                              27700,
                              32700,
                              24100,
                              -10000,
                              "NA",
                              "NA"
                            ],
                            "East Midlands": [
                              -10000,
                              22100,
                              29700,
                              33900,
                              -10000,
                              "NA",
                              31000,
                              28100,
                              24600,
                              22600,
                              27300,
                              "NA",
                              -10000,
                              "NA"
                            ],
                            "West Midlands": [
                              -10000,
                              28300,
                              32800,
                              31000,
                              "NA",
                              "NA",
                              30800,
                              29900,
                              23200,
                              24100,
                              26300,
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "East of England": [
                              -10000,
                              39200,
                              34500,
                              31800,
                              "NA",
                              "NA",
                              33000,
                              31900,
                              33600,
                              26500,
                              27000,
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "London": [
                              -10000,
                              35400,
                              32800,
                              34700,
                              "NA",
                              -10000,
                              38000,
                              29900,
                              27400,
                              25000,
                              32800,
                              -10000,
                              -10000,
                              -10000
                            ],
                            "South East": [
                              -10000,
                              38300,
                              35000,
                              31800,
                              -10000,
                              -10000,
                              30300,
                              30700,
                              29600,
                              24800,
                              28100,
                              25700,
                              -10000,
                              -10000
                            ],
                            "South West": [
                              "NA",
                              27000,
                              33000,
                              34300,
                              "NA",
                              "NA",
                              31400,
                              -10000,
                              25600,
                              29600,
                              23400,
                              -10000,
                              -10000,
                              -10000
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£23,000",
                                "c",
                                "£35,200",
                                "c",
                                "c",
                                "£24,100",
                                "c",
                                "£24,800",
                                "£21,500",
                                "£25,900",
                                "c",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£29,900",
                                "£33,000",
                                "£29,600",
                                "x",
                                "c",
                                "£29,000",
                                "£22,600",
                                "£26,800",
                                "£29,200",
                                "£22,800",
                                "x",
                                "c",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£24,800",
                                "£32,500",
                                "£29,600",
                                "c",
                                "x",
                                "£29,200",
                                "£28,500",
                                "£27,700",
                                "£32,700",
                                "£24,100",
                                "c",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£22,100",
                                "£29,700",
                                "£33,900",
                                "c",
                                "x",
                                "£31,000",
                                "£28,100",
                                "£24,600",
                                "£22,600",
                                "£27,300",
                                "x",
                                "c",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£28,300",
                                "£32,800",
                                "£31,000",
                                "x",
                                "x",
                                "£30,800",
                                "£29,900",
                                "£23,200",
                                "£24,100",
                                "£26,300",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£39,200",
                                "£34,500",
                                "£31,800",
                                "x",
                                "x",
                                "£33,000",
                                "£31,900",
                                "£33,600",
                                "£26,500",
                                "£27,000",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£35,400",
                                "£32,800",
                                "£34,700",
                                "x",
                                "c",
                                "£38,000",
                                "£29,900",
                                "£27,400",
                                "£25,000",
                                "£32,800",
                                "c",
                                "c",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£38,300",
                                "£35,000",
                                "£31,800",
                                "c",
                                "c",
                                "£30,300",
                                "£30,700",
                                "£29,600",
                                "£24,800",
                                "£28,100",
                                "£25,700",
                                "c",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "£27,000",
                                "£33,000",
                                "£34,300",
                                "x",
                                "x",
                                "£31,400",
                                "c",
                                "£25,600",
                                "£29,600",
                                "£23,400",
                                "c",
                                "c",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "ed56ac4a923751522ff29fe6d4b9a09c",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction",
                              "Construction"
                            ],
                            "group_name": [
                              "Construction of residential and non-residential buildings",
                              "Construction of other civil engineering projects",
                              "Construction of roads and railways",
                              "Development of building projects",
                              "Construction of utility projects",
                              "Demolition and site preparation",
                              "Other specialised construction activities",
                              "Building completion and finishing",
                              "Electrical; plumbing and other construction installation activities"
                            ],
                            "North East": [
                              40000,
                              40500,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              32100,
                              -10000,
                              24100
                            ],
                            "North West": [
                              40300,
                              36900,
                              -10000,
                              28600,
                              36900,
                              -10000,
                              26600,
                              26300,
                              24500
                            ],
                            "Yorkshire and The Humber": [
                              36500,
                              40500,
                              -10000,
                              23700,
                              33600,
                              -10000,
                              36100,
                              25400,
                              22100
                            ],
                            "East Midlands": [
                              40900,
                              44500,
                              45300,
                              36000,
                              -10000,
                              -10000,
                              25600,
                              24600,
                              25700
                            ],
                            "West Midlands": [
                              39200,
                              41200,
                              41200,
                              28100,
                              29600,
                              -10000,
                              27200,
                              27400,
                              24600
                            ],
                            "East of England": [
                              46700,
                              43100,
                              36900,
                              42000,
                              35400,
                              -10000,
                              27200,
                              29900,
                              27400
                            ],
                            "London": [
                              43600,
                              46000,
                              46000,
                              41600,
                              40300,
                              -10000,
                              35700,
                              29900,
                              32500
                            ],
                            "South East": [
                              47300,
                              41200,
                              34300,
                              35800,
                              32800,
                              -10000,
                              28600,
                              31600,
                              26100
                            ],
                            "South West": [
                              38700,
                              41200,
                              -10000,
                              28700,
                              -10000,
                              -10000,
                              -10000,
                              29600,
                              27000
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "£40,000",
                                "£40,500",
                                "c",
                                "c",
                                "c",
                                "c",
                                "£32,100",
                                "c",
                                "£24,100"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "£40,300",
                                "£36,900",
                                "c",
                                "£28,600",
                                "£36,900",
                                "c",
                                "£26,600",
                                "£26,300",
                                "£24,500"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "£36,500",
                                "£40,500",
                                "c",
                                "£23,700",
                                "£33,600",
                                "c",
                                "£36,100",
                                "£25,400",
                                "£22,100"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "£40,900",
                                "£44,500",
                                "£45,300",
                                "£36,000",
                                "c",
                                "c",
                                "£25,600",
                                "£24,600",
                                "£25,700"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "£39,200",
                                "£41,200",
                                "£41,200",
                                "£28,100",
                                "£29,600",
                                "c",
                                "£27,200",
                                "£27,400",
                                "£24,600"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "£46,700",
                                "£43,100",
                                "£36,900",
                                "£42,000",
                                "£35,400",
                                "c",
                                "£27,200",
                                "£29,900",
                                "£27,400"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£43,600",
                                "£46,000",
                                "£46,000",
                                "£41,600",
                                "£40,300",
                                "c",
                                "£35,700",
                                "£29,900",
                                "£32,500"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "£47,300",
                                "£41,200",
                                "£34,300",
                                "£35,800",
                                "£32,800",
                                "c",
                                "£28,600",
                                "£31,600",
                                "£26,100"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "£38,700",
                                "£41,200",
                                "c",
                                "£28,700",
                                "c",
                                "c",
                                "c",
                                "£29,600",
                                "£27,000"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "bcc141abcb8317397c976f686f4e2b8a",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Real estate activities",
                              "Real estate activities",
                              "Real estate activities"
                            ],
                            "group_name": [
                              "Real estate activities on a fee or contract basis",
                              "Buying and selling of own real estate",
                              "Renting and operating of own or leased real estate"
                            ],
                            "North East": [
                              29600,
                              -10000,
                              23000
                            ],
                            "North West": [
                              27000,
                              -10000,
                              25200
                            ],
                            "Yorkshire and The Humber": [
                              26600,
                              -10000,
                              24800
                            ],
                            "East Midlands": [
                              26600,
                              -10000,
                              23000
                            ],
                            "West Midlands": [
                              28100,
                              -10000,
                              24800
                            ],
                            "East of England": [
                              33600,
                              -10000,
                              25900
                            ],
                            "London": [
                              36900,
                              -10000,
                              30700
                            ],
                            "South East": [
                              32800,
                              -10000,
                              27700
                            ],
                            "South West": [
                              31600,
                              -10000,
                              25600
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "£29,600",
                                "c",
                                "£23,000"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "£27,000",
                                "c",
                                "£25,200"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "£26,600",
                                "c",
                                "£24,800"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "£26,600",
                                "c",
                                "£23,000"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "£28,100",
                                "c",
                                "£24,800"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "£33,600",
                                "c",
                                "£25,900"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£36,900",
                                "c",
                                "£30,700"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "£32,800",
                                "c",
                                "£27,700"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "£31,600",
                                "c",
                                "£25,600"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "48620b502a8be9f5cb102120a092fd3d",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Other service activities",
                              "Other service activities",
                              "Other service activities",
                              "Other service activities",
                              "Other service activities",
                              "Other service activities"
                            ],
                            "group_name": [
                              "Activities of trade unions",
                              "Repair of computers and communication equipment",
                              "Activities of business; employers and professional membership organisations",
                              "Activities of other membership organisations",
                              "Other personal service activities",
                              "Repair of personal and household goods"
                            ],
                            "North East": [
                              -10000,
                              -10000,
                              24500,
                              22100,
                              21200,
                              -10000
                            ],
                            "North West": [
                              -10000,
                              31800,
                              25900,
                              20800,
                              18200,
                              -10000
                            ],
                            "Yorkshire and The Humber": [
                              -10000,
                              27900,
                              28800,
                              21000,
                              21400,
                              -10000
                            ],
                            "East Midlands": [
                              -10000,
                              34100,
                              27200,
                              22100,
                              22900,
                              -10000
                            ],
                            "West Midlands": [
                              -10000,
                              29200,
                              28500,
                              21900,
                              21000,
                              -10000
                            ],
                            "East of England": [
                              -10000,
                              36500,
                              31400,
                              24100,
                              24100,
                              -10000
                            ],
                            "London": [
                              37200,
                              44200,
                              31800,
                              27600,
                              27700,
                              -10000
                            ],
                            "South East": [
                              -10000,
                              46000,
                              30800,
                              25200,
                              27000,
                              -10000
                            ],
                            "South West": [
                              -10000,
                              30700,
                              31800,
                              22600,
                              23900,
                              -10000
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "£24,500",
                                "£22,100",
                                "£21,200",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£31,800",
                                "£25,900",
                                "£20,800",
                                "£18,200",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£27,900",
                                "£28,800",
                                "£21,000",
                                "£21,400",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£34,100",
                                "£27,200",
                                "£22,100",
                                "£22,900",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£29,200",
                                "£28,500",
                                "£21,900",
                                "£21,000",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£36,500",
                                "£31,400",
                                "£24,100",
                                "£24,100",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£37,200",
                                "£44,200",
                                "£31,800",
                                "£27,600",
                                "£27,700",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£46,000",
                                "£30,800",
                                "£25,200",
                                "£27,000",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£30,700",
                                "£31,800",
                                "£22,600",
                                "£23,900",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "9c50bdefecabfe8972d7ca6cae1a53e5",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Electricity, gas, steam and air conditioning supply",
                              "Electricity, gas, steam and air conditioning supply",
                              "Electricity, gas, steam and air conditioning supply"
                            ],
                            "group_name": [
                              "Manufacture of gas; distribution of gaseous fuels through mains",
                              "Electric power generation; transmission and distribution",
                              "Steam and air conditioning supply"
                            ],
                            "North East": [
                              -10000,
                              39800,
                              "NA"
                            ],
                            "North West": [
                              33200,
                              36100,
                              "NA"
                            ],
                            "Yorkshire and The Humber": [
                              38700,
                              32100,
                              "NA"
                            ],
                            "East Midlands": [
                              38000,
                              27400,
                              "NA"
                            ],
                            "West Midlands": [
                              40500,
                              27700,
                              "NA"
                            ],
                            "East of England": [
                              -10000,
                              42000,
                              "NA"
                            ],
                            "London": [
                              49600,
                              45600,
                              -10000
                            ],
                            "South East": [
                              41200,
                              37600,
                              -10000
                            ],
                            "South West": [
                              -10000,
                              38300,
                              -10000
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£39,800",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "£33,200",
                                "£36,100",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "£38,700",
                                "£32,100",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "£38,000",
                                "£27,400",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "£40,500",
                                "£27,700",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£42,000",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£49,600",
                                "£45,600",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "£41,200",
                                "£37,600",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£38,300",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "2492e18d1fbfdafb9d4cdbed9dfe6b43",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Water supply - sewerage, waste management and remediation activities",
                              "Water supply - sewerage, waste management and remediation activities",
                              "Water supply - sewerage, waste management and remediation activities",
                              "Water supply - sewerage, waste management and remediation activities",
                              "Water supply - sewerage, waste management and remediation activities",
                              "Water supply - sewerage, waste management and remediation activities"
                            ],
                            "group_name": [
                              "Sewerage",
                              "Waste treatment and disposal",
                              "Remediation activities and other waste management services",
                              "Water collection; treatment and supply",
                              "Materials recovery",
                              "Waste collection"
                            ],
                            "North East": [
                              -10000,
                              -10000,
                              "NA",
                              28100,
                              "NA",
                              -10000
                            ],
                            "North West": [
                              -10000,
                              34700,
                              -10000,
                              -10000,
                              -10000,
                              30700
                            ],
                            "Yorkshire and The Humber": [
                              -10000,
                              -10000,
                              "NA",
                              34300,
                              -10000,
                              -10000
                            ],
                            "East Midlands": [
                              -10000,
                              -10000,
                              -10000,
                              33000,
                              -10000,
                              29600
                            ],
                            "West Midlands": [
                              -10000,
                              -10000,
                              -10000,
                              32100,
                              -10000,
                              27600
                            ],
                            "East of England": [
                              -10000,
                              -10000,
                              -10000,
                              29600,
                              -10000,
                              -10000
                            ],
                            "London": [
                              35800,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              32300
                            ],
                            "South East": [
                              36900,
                              43100,
                              -10000,
                              29200,
                              -10000,
                              33600
                            ],
                            "South West": [
                              -10000,
                              -10000,
                              -10000,
                              26300,
                              "NA",
                              31000
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "x",
                                "£28,100",
                                "x",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "£34,700",
                                "c",
                                "c",
                                "c",
                                "£30,700"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "x",
                                "£34,300",
                                "c",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "c",
                                "£33,000",
                                "c",
                                "£29,600"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "c",
                                "£32,100",
                                "c",
                                "£27,600"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "c",
                                "£29,600",
                                "c",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£35,800",
                                "c",
                                "x",
                                "c",
                                "c",
                                "£32,300"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "£36,900",
                                "£43,100",
                                "c",
                                "£29,200",
                                "c",
                                "£33,600"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "c",
                                "£26,300",
                                "x",
                                "£31,000"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "11c40a95906a98e24aa13ff82e9abf26",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing",
                              "Agriculture, forestry and fishing"
                            ],
                            "group_name": [
                              "Mixed farming",
                              "Silviculture and other forestry activities",
                              "Growing of perennial crops",
                              "Animal production",
                              "Growing of non-perennial crops",
                              "Support services to forestry",
                              "Support activities to agriculture and post-harvest crop activities",
                              "Plant propagation",
                              "Aquaculture",
                              "Fishing",
                              "Hunting; trapping and related service activities",
                              "Logging"
                            ],
                            "North East": [
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "North West": [
                              -10000,
                              -10000,
                              "NA",
                              20800,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              "NA",
                              -10000
                            ],
                            "Yorkshire and The Humber": [
                              -10000,
                              -10000,
                              "NA",
                              25700,
                              23700,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "East Midlands": [
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              19700,
                              "NA",
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "West Midlands": [
                              -10000,
                              -10000,
                              -10000,
                              20100,
                              19200,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              -10000
                            ],
                            "East of England": [
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              26500,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              -10000
                            ],
                            "London": [
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              "NA",
                              -10000,
                              "NA",
                              "NA",
                              "NA",
                              "NA"
                            ],
                            "South East": [
                              -10000,
                              -10000,
                              -10000,
                              22600,
                              22800,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              "NA"
                            ],
                            "South West": [
                              27700,
                              23700,
                              -10000,
                              23000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "x",
                                "c",
                                "c",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "x",
                                "£20,800",
                                "c",
                                "c",
                                "c",
                                "c",
                                "x",
                                "c",
                                "x",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "x",
                                "£25,700",
                                "£23,700",
                                "c",
                                "c",
                                "x",
                                "c",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "x",
                                "c",
                                "£19,700",
                                "x",
                                "c",
                                "c",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "c",
                                "£20,100",
                                "£19,200",
                                "c",
                                "c",
                                "c",
                                "x",
                                "x",
                                "x",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "x",
                                "c",
                                "£26,500",
                                "c",
                                "c",
                                "c",
                                "x",
                                "x",
                                "x",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "c",
                                "c",
                                "c",
                                "c",
                                "x",
                                "x",
                                "c",
                                "x",
                                "x",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "c",
                                "£22,600",
                                "£22,800",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "x",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "£27,700",
                                "£23,700",
                                "c",
                                "£23,000",
                                "c",
                                "c",
                                "c",
                                "c",
                                "c",
                                "x",
                                "c",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "47928eb1f41d26b3c96ba81688e7b978",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Mining and quarrying",
                              "Mining and quarrying",
                              "Mining and quarrying",
                              "Mining and quarrying",
                              "Mining and quarrying"
                            ],
                            "group_name": [
                              "Extraction of crude petroleum",
                              "Mining and quarrying n.e.c.",
                              "Support activities for petroleum and natural gas extraction",
                              "Quarrying of stone; sand and clay",
                              "Support activities for other mining and quarrying"
                            ],
                            "North East": [
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA"
                            ],
                            "North West": [
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA"
                            ],
                            "Yorkshire and The Humber": [
                              -10000,
                              -10000,
                              "NA",
                              -10000,
                              "NA"
                            ],
                            "East Midlands": [
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              -10000
                            ],
                            "West Midlands": [
                              "NA",
                              "NA",
                              "NA",
                              -10000,
                              -10000
                            ],
                            "East of England": [
                              -10000,
                              "NA",
                              "NA",
                              -10000,
                              "NA"
                            ],
                            "London": [
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              "NA"
                            ],
                            "South East": [
                              -10000,
                              -10000,
                              -10000,
                              -10000,
                              -10000
                            ],
                            "South West": [
                              "NA",
                              -10000,
                              -10000,
                              -10000,
                              -10000
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "c",
                                "c",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "c",
                                "c",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "x",
                                "c",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "c",
                                "c",
                                "c",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "x",
                                "x",
                                "c",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "x",
                                "x",
                                "c",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "c",
                                "c",
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "c",
                                "c",
                                "c",
                                "c",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "x",
                                "c",
                                "c",
                                "c",
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "05c5ce939b54d905375b2b27a3f3daf0",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Activities of households as employers - undifferentiated goods-and services-producing activities of households for own use"
                            ],
                            "group_name": [
                              "Activities of households as employers of domestic personnel"
                            ],
                            "North East": [
                              -10000
                            ],
                            "North West": [
                              -10000
                            ],
                            "Yorkshire and The Humber": [
                              "NA"
                            ],
                            "East Midlands": [
                              -10000
                            ],
                            "West Midlands": [
                              -10000
                            ],
                            "East of England": [
                              -10000
                            ],
                            "London": [
                              21400
                            ],
                            "South East": [
                              -10000
                            ],
                            "South West": [
                              -10000
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£21,400"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "fadd45c316b1e1b33a0fa4ad446e635b",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Activities of extraterritorial organisations and bodies"
                            ],
                            "group_name": [
                              "Activities of extraterritorial organisations and bodies"
                            ],
                            "North East": [
                              "NA"
                            ],
                            "North West": [
                              "NA"
                            ],
                            "Yorkshire and The Humber": [
                              "NA"
                            ],
                            "East Midlands": [
                              "NA"
                            ],
                            "West Midlands": [
                              "NA"
                            ],
                            "East of England": [
                              -10000
                            ],
                            "London": [
                              "NA"
                            ],
                            "South East": [
                              -10000
                            ],
                            "South West": [
                              "NA"
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "c"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "x"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "8e7eebf0138f0068fa72c93abc990cb3",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  },
                  {
                    "name": "div",
                    "attribs": {
                      "style": {
                        "padding": "16px"
                      }
                    },
                    "children": [
                      {
                        "name": "Reactable",
                        "attribs": {
                          "data": {
                            "SECTIONNAME": [
                              "Not known"
                            ],
                            "group_name": [
                              "Not known"
                            ],
                            "North East": [
                              20000
                            ],
                            "North West": [
                              16700
                            ],
                            "Yorkshire and The Humber": [
                              18900
                            ],
                            "East Midlands": [
                              19200
                            ],
                            "West Midlands": [
                              18200
                            ],
                            "East of England": [
                              18500
                            ],
                            "London": [
                              19300
                            ],
                            "South East": [
                              20400
                            ],
                            "South West": [
                              19400
                            ]
                          },
                          "columns": [
                            {
                              "id": "SECTIONNAME",
                              "name": "Industry",
                              "type": "character",
                              "na": "x",
                              "width": 500
                            },
                            {
                              "id": "group_name",
                              "name": "3 digit SIC code",
                              "type": "character",
                              "na": "x",
                              "width": 300
                            },
                            {
                              "id": "North East",
                              "name": "North East",
                              "type": "numeric",
                              "cell": [
                                "£20,000"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "North West",
                              "name": "North West",
                              "type": "numeric",
                              "cell": [
                                "£16,700"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "Yorkshire and The Humber",
                              "name": "Yorkshire and The Humber",
                              "type": "numeric",
                              "cell": [
                                "£18,900"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East Midlands",
                              "name": "East Midlands",
                              "type": "numeric",
                              "cell": [
                                "£19,200"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "West Midlands",
                              "name": "West Midlands",
                              "type": "numeric",
                              "cell": [
                                "£18,200"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "East of England",
                              "name": "East of England",
                              "type": "numeric",
                              "cell": [
                                "£18,500"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "London",
                              "name": "London",
                              "type": "numeric",
                              "cell": [
                                "£19,300"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South East",
                              "name": "South East",
                              "type": "numeric",
                              "cell": [
                                "£20,400"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            },
                            {
                              "id": "South West",
                              "name": "South West",
                              "type": "numeric",
                              "cell": [
                                "£19,400"
                              ],
                              "na": "x",
                              "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
                            }
                          ],
                          "defaultPageSize": 300,
                          "outlined": true,
                          "dataKey": "a1017586665153f0e85a26025f4c9959",
                          "static": false,
                          "nested": true
                        },
                        "children": [

                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "id": "SECTIONNAME",
                "name": "Industry",
                "type": "character",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "footer": "TOTAL (N)",
                "na": "x",
                "width": 500
              },
              {
                "id": "group_name",
                "name": "3 digit SIC code",
                "type": "character",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "na": "x",
                "width": 300
              },
              {
                "id": "North East",
                "name": "North East",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£30,300",
                  "£27,000",
                  "£28,800",
                  "£21,900",
                  "£29,200",
                  "£21,500",
                  "£26,300",
                  "£25,200",
                  "£31,800",
                  "£19,300",
                  "£19,300",
                  "£25,400",
                  "£35,400",
                  "£25,200",
                  "£22,300",
                  "£40,300",
                  "£27,400",
                  "c",
                  "c",
                  "c",
                  "x",
                  "£20,000"
                ],
                "footer": "8,850",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "id": "North West",
                "name": "North West",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£29,900",
                  "£26,300",
                  "£29,200",
                  "£24,100",
                  "£31,400",
                  "£24,500",
                  "£27,000",
                  "£27,700",
                  "£33,200",
                  "£20,100",
                  "£21,900",
                  "£28,500",
                  "£33,600",
                  "£25,900",
                  "£22,600",
                  "£34,700",
                  "£31,000",
                  "£23,000",
                  "c",
                  "c",
                  "x",
                  "£16,700"
                ],
                "footer": "27,350",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['North West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "id": "Yorkshire and The Humber",
                "name": "Yorkshire and The Humber",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£29,200",
                  "£26,300",
                  "£29,200",
                  "£23,000",
                  "£31,400",
                  "£23,000",
                  "£27,400",
                  "£27,000",
                  "£29,600",
                  "£19,300",
                  "£23,400",
                  "£28,100",
                  "£32,500",
                  "£25,600",
                  "£21,900",
                  "£34,300",
                  "£32,100",
                  "£25,200",
                  "c",
                  "x",
                  "x",
                  "£18,900"
                ],
                "footer": "18,895",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['Yorkshire and The Humber']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "id": "East Midlands",
                "name": "East Midlands",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£29,600",
                  "£27,000",
                  "£30,300",
                  "£24,800",
                  "£32,500",
                  "£24,500",
                  "£27,400",
                  "£30,300",
                  "£33,900",
                  "£20,400",
                  "£22,300",
                  "£28,800",
                  "£36,900",
                  "£25,600",
                  "£24,100",
                  "£28,800",
                  "£31,600",
                  "£21,400",
                  "c",
                  "c",
                  "x",
                  "£19,200"
                ],
                "footer": "15,255",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "id": "West Midlands",
                "name": "West Midlands",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£29,900",
                  "£27,700",
                  "£30,700",
                  "£24,800",
                  "£33,600",
                  "£23,900",
                  "£27,400",
                  "£28,500",
                  "£35,000",
                  "£20,800",
                  "£23,700",
                  "£28,800",
                  "£35,000",
                  "£25,200",
                  "£23,400",
                  "£35,000",
                  "£29,900",
                  "£21,900",
                  "c",
                  "c",
                  "x",
                  "£18,200"
                ],
                "footer": "19,355",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['West Midlands']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "id": "East of England",
                "name": "East of England",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£31,400",
                  "£28,100",
                  "£35,400",
                  "£27,000",
                  "£37,200",
                  "£29,600",
                  "£29,900",
                  "£41,600",
                  "£36,100",
                  "£22,600",
                  "£24,500",
                  "£32,100",
                  "£40,200",
                  "£29,600",
                  "£26,300",
                  "£43,100",
                  "£31,900",
                  "£26,300",
                  "£47,800",
                  "c",
                  "c",
                  "£18,500"
                ],
                "footer": "19,935",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['East of England']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "id": "London",
                "name": "London",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£35,000",
                  "£31,400",
                  "£39,800",
                  "£29,600",
                  "£40,900",
                  "£32,100",
                  "£35,000",
                  "£57,300",
                  "£37,200",
                  "£24,500",
                  "£27,000",
                  "£33,900",
                  "£39,800",
                  "£34,300",
                  "£29,600",
                  "£46,700",
                  "£35,000",
                  "£23,900",
                  "c",
                  "£21,400",
                  "x",
                  "£19,300"
                ],
                "footer": "50,740",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['London']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "id": "South East",
                "name": "South East",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£31,400",
                  "£28,500",
                  "£36,100",
                  "£27,000",
                  "£38,000",
                  "£28,800",
                  "£30,700",
                  "£41,600",
                  "£35,000",
                  "£22,600",
                  "£25,200",
                  "£31,400",
                  "£39,400",
                  "£31,800",
                  "£26,600",
                  "£39,800",
                  "£33,600",
                  "£23,000",
                  "c",
                  "c",
                  "c",
                  "£20,400"
                ],
                "footer": "29,730",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South East']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              },
              {
                "id": "South West",
                "name": "South West",
                "type": "numeric",
                "footerStyle": {
                  "fontWeight": "bold"
                },
                "cell": [
                  "£29,600",
                  "£26,600",
                  "£32,500",
                  "£22,600",
                  "£32,500",
                  "£25,200",
                  "£28,100",
                  "£31,400",
                  "£33,400",
                  "£19,700",
                  "£21,600",
                  "£29,200",
                  "£33,600",
                  "£28,800",
                  "£24,100",
                  "£39,100",
                  "£31,800",
                  "£23,400",
                  "c",
                  "c",
                  "x",
                  "£19,400"
                ],
                "footer": "16,285",
                "na": "x",
                "style": "\n            // source: https://glin.github.io/reactable/articles/examples.html#grouped-cell-rendering-1\n            function(rowInfo) {\n              // source: https://stackoverflow.com/a/44134328/4856719\n              function hslToHex(h, s, l) {\n                l /= 100;\n                const a = s * Math.min(l, 1 - l) / 100;\n                const f = n => {\n                  const k = (n + h / 30) % 12;\n                  const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n                  return Math.round(255 * color).toString(16).padStart(2, '0');\n                };\n                return `#${f(0)}${f(8)}${f(4)}`;\n              }\n              var value = rowInfo.row['South West']\n              var max = 57300\n              var min = 16700\n              // pct_value = (value - min) * 100 / (max - min)\n              pct_value = (Math.min(value, max) - min) * 100 / (max - min)\n              // If value equals 0, x, or c, set background to white.\n              if (value < 0.001 || isNaN(value)) {\n                var color = '#000000'\n                var bg = '#FFFFFF'\n              } else {\n                var color = '#000000'\n                var bg = hslToHex(209, 59, 100 - pct_value / 2)\n              }\n              return { color: color, backgroundColor: bg}\n          }"
              }
            ],
            "defaultPageSize": 22,
            "showSortable": true,
            "height": "600px",
            "dataKey": "390ec04756f8ef009398aaf709e443bf",
            "static": false
          },
          "children": [

          ]
        },
        "class": "reactR_markup"
      },
      "evals": [
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.0.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.1.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.2.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.3.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.4.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.5.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.6.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.7.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.8.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.9.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.10.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.11.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.12.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.13.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.14.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.15.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.16.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.17.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.18.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.19.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.20.children.0.attribs.columns.10.style",
        "tag.attribs.columns.0.details.21.children.0.attribs.columns.2.style",
        "tag.attribs.columns.0.details.21.children.0.attribs.columns.3.style",
        "tag.attribs.columns.0.details.21.children.0.attribs.columns.4.style",
        "tag.attribs.columns.0.details.21.children.0.attribs.columns.5.style",
        "tag.attribs.columns.0.details.21.children.0.attribs.columns.6.style",
        "tag.attribs.columns.0.details.21.children.0.attribs.columns.7.style",
        "tag.attribs.columns.0.details.21.children.0.attribs.columns.8.style",
        "tag.attribs.columns.0.details.21.children.0.attribs.columns.9.style",
        "tag.attribs.columns.0.details.21.children.0.attribs.columns.10.style",
        "tag.attribs.columns.3.style",
        "tag.attribs.columns.4.style",
        "tag.attribs.columns.5.style",
        "tag.attribs.columns.6.style",
        "tag.attribs.columns.7.style",
        "tag.attribs.columns.8.style",
        "tag.attribs.columns.9.style",
        "tag.attribs.columns.10.style",
        "tag.attribs.columns.11.style"
      ],
      "jsHooks": [

      ],
      "deps": [

      ]
    },
    "crosstab_text": "Among those who graduated five years previously from first degree courses in all subjects and who were working during the 2021-22 tax year, <b><b>Human health and social work activities<\/b> <\/b> was the most common industry for those living in the North East, the North West, Yorkshire and The Humber, the East Midlands, the West Midlands, the East of England, the South East  and the South West,\n      and <b><b>Professional, scientific and technical activities<\/b> <\/b> was the most common industry for those living in London.<br/><br/> The group with the highest earnings was graduates living in <b>London<\/b> who worked in the <b>Financial and insurance activities<\/b> industry (median earnings of <b>£57,300<\/b>). "
  }
}
